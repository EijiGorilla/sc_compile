{"version":3,"file":"static/js/4313.eb4e6d3e.chunk.js","mappings":"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","sources":["../node_modules/src/.internal/charts/xy/XYCursor.ts","../node_modules/src/.internal/charts/xy/axes/DateAxis.ts"],"sourcesContent":["import type { IPoint } from \"../../core/util/IPoint\";\nimport type { XYChart } from \"./XYChart\"\nimport type { XYSeries } from \"./series/XYSeries\";\nimport type { ISpritePointerEvent } from \"../../core/render/Sprite\";\nimport type { Axis } from \"./axes/Axis\";\nimport type { AxisRenderer } from \"./axes/AxisRenderer\";\nimport type { Tooltip } from \"../../core/render/Tooltip\";\n\nimport { Container, IContainerSettings, IContainerPrivate, IContainerEvents } from \"../../core/render/Container\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { Grid } from \"./axes/Grid\";\n//import { Animations } from \"../core/util/Animation\";\n\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $object from \"../../core/util/Object\";\nimport type { IPointerEvent } from \"../../core/render/backend/Renderer\";\n\nexport interface IXYCursorSettings extends IContainerSettings {\n\n\t/**\n\t * Cursor's X axis.\n\t *\n\t * If set, cursor will snap to that axis' cells.\n\t */\n\txAxis?: Axis<AxisRenderer>;\n\n\t/**\n\t * Cursor's Y axis.\n\t *\n\t * If set, cursor will snap to that axis' cells.\n\t */\n\tyAxis?: Axis<AxisRenderer>;\n\n\t/**\n\t * What should cursor do when dragged across plot area.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#Behavior} for more info\n\t * @default \"none\"\n\t */\n\tbehavior?: \"zoomX\" | \"zoomY\" | \"zoomXY\" | \"selectX\" | \"selectY\" | \"selectXY\" | \"none\";\n\n\t/**\n\t * Cursor's horizontal position relative to plot area.\n\t *\n\t * If this setting is set, cursor will not react to mouse/touch and will just\n\t * sit at specified position until `positionX` is reset to `undefined`.\n\t *\n\t * `0` - left, `1` - right.\n\t */\n\tpositionX?: number;\n\n\t/**\n\t * Cursor's vertical position relative to plot area.\n\t *\n\t * If this setting is set, cursor will not react to mouse/touch and will just\n\t * sit at specified position until `positionY` is reset to `undefined`.\n\t *\n\t * `0` - left, `1` - right.\n\t */\n\tpositionY?: number;\n\n\t/**\n\t * If set to `true`, cursor will not be hidden when mouse cursor moves out\n\t * of the plot area.\n\t *\n\t * @default false\n\t */\n\talwaysShow?: boolean;\n\n\t/**\n\t * A list of series to snap cursor to.\n\t *\n\t * If set, the cursor will always snap to the closest data item of listed\n\t * series.\n\t */\n\tsnapToSeries?: Array<XYSeries>;\n\n\t/**\n\t * Defines in which direction to look when searching for the nearest data\n\t * item to snap to.\n\t *\n\t * Possible values: `\"xy\"` (default), `\"x\"`, `\"y\"`, `\"x!\"`, `\"y!\"`.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#snapping-to-series} for more info\n\t * @since 5.0.6\n\t * @default \"xy\"\n\t */\n\tsnapToSeriesBy?: \"xy\" | \"x\" | \"y\" | \"x!\" | \"y!\";\n\n\t/**\n\t * An array of other [[XYCursor]] objects to sync this cursor with.\n\t *\n\t * If set will automatically move synced cursors to the same position within\n\t * their respective axes as the this cursor assumin same XY coordinates of\n\t * the pointer.\n\t *\n\t * NOTE: Syncing is performed using actual X/Y coordinates of the point of\n\t * mouse cursor's position or touch. It means that they will not sync by axis\n\t * positions, but rather by screen coordinates. For example vertical lines\n\t * will not sync across horizontally laid out charts, and vice versa.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/#syncing-cursors} for more info\n\t * @since 5.1.4\n\t */\n\tsyncWith?: Array<XYCursor>;\n\n\t/**\n\t * Minimum distance in pixels between down and up points.\n\t *\n\t * If a distance is less than the value of `moveThreshold`, the zoom or\n\t * selection won't happen.\n\t *\n\t * @since 5.2.20\n\t * @default 1\n\t */\n\tmoveThreshold?: number\n\n}\n\n\nexport interface IXYCursorPrivate extends IContainerPrivate {\n\n\t/**\n\t * Current X/Y coordinates of the cursor.\n\t */\n\tpoint?: IPoint;\n\n\t/**\n\t * Current horizontal position relative to the plot area (0-1).\n\t */\n\tpositionX?: number;\n\n\t/**\n\t * Current vertical position relative to the plot area (0-1).\n\t */\n\tpositionY?: number;\n\n\t/**\n\t * Horizontal cursor position on the moment when selection started.\n\t */\n\tdownPositionX?: number;\n\n\t/**\n\t * Vertical cursor position on the moment when selection started.\n\t */\n\tdownPositionY?: number;\n\n\t/**\n\t * Last global point to which cursor moved\n\t */\n\tlastPoint?: IPoint;\n}\n\nexport interface IXYCursorEvents extends IContainerEvents {\n\n\t/**\n\t * Kicks in when cursor selection ends.\n\t *\n\t * Only when `behavior` is set.\n\t */\n\tselectended: {\n\t\toriginalEvent: IPointerEvent,\n\t\ttarget: XYCursor\n\t};\n\n\t/**\n\t * Kicks in when cursor selection starts.\n\t *\n\t * Only when `behavior` is set.\n\t */\n\tselectstarted: {\n\t\toriginalEvent: IPointerEvent,\n\t\ttarget: XYCursor\n\t};\n\n\t/**\n\t * Kicks in when cursor's position over plot area changes.\n\t */\n\tcursormoved: {\n\t\tpoint: IPoint,\n\t\ttarget: XYCursor,\n\t\toriginalEvent?: IPointerEvent\n\t};\n\n\t/**\n\t * Kicks in when cursor's is hidden when user rolls-out of the plot area\n\t */\n\tcursorhidden: {\n\t\ttarget: XYCursor\n\t};\n\n\t/**\n\t * Invoked if pointer is pressed down on a plot area and released without\n\t * moving (only when behavior is `\"selectX\"`).\n\t *\n\t * @since 5.4.7\n\t */\n\tselectcancelled: {\n\t\toriginalEvent: IPointerEvent,\n\t\ttarget: XYCursor\n\t};\n\n}\n\n/**\n * Creates a chart cursor for an [[XYChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/cursor/} for more info\n * @important\n */\nexport class XYCursor extends Container {\n\tpublic static className: string = \"XYCursor\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([XYCursor.className]);\n\n\tdeclare public _settings: IXYCursorSettings;\n\tdeclare public _privateSettings: IXYCursorPrivate;\n\tdeclare public _events: IXYCursorEvents;\n\n\tprotected _alwaysShow: boolean = false;\n\n\t/**\n\t * A [[Grid]] elment that used for horizontal line of the cursor crosshair.\n\t *\n\t * @default Grid.new()\n\t */\n\tpublic readonly lineX: Grid = this.children.push(Grid.new(this._root, {\n\t\tthemeTags: [\"x\"]\n\t}));\n\n\t/**\n\t * A [[Grid]] elment that used for horizontal line of the cursor crosshair.\n\t *\n\t * @default Grid.new()\n\t */\n\tpublic readonly lineY: Grid = this.children.push(Grid.new(this._root, {\n\t\tthemeTags: [\"y\"]\n\t}));\n\n\t/**\n\t * An element that represents current selection.\n\t *\n\t * @default Graphics.new()\n\t */\n\tpublic readonly selection: Graphics = this.children.push(Graphics.new(this._root, {\n\t\tthemeTags: [\"selection\", \"cursor\"], layer: 30\n\t}));\n\n\tprotected _movePoint: IPoint | undefined;\n\tprotected _lastPoint: IPoint = { x: 0, y: 0 };\n\tprotected _lastPoint2: IPoint = { x: 0, y: 0 };\n\n\tprotected _tooltipX: boolean = false;\n\tprotected _tooltipY: boolean = false;\n\n\t/**\n\t * A chart cursor is attached to.\n\t */\n\tpublic chart: XYChart | undefined;\n\n\tprotected _toX?: number;\n\tprotected _toY?: number;\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"xy\", \"cursor\"]);\n\t\tsuper._afterNew();\n\t\tthis.setAll({ \"width\": p100, height: p100, isMeasured: true, position: \"absolute\" });\n\t\tthis.states.create(\"hidden\", { visible: true, opacity: 0 });\n\t\tthis._drawLines();\n\t\tthis.setPrivateRaw(\"visible\", false);\n\n\t\tthis._disposers.push(this.setTimeout(() => {\n\t\t\tthis.setPrivate(\"visible\", true)\n\t\t}, 500));\n\n\t\tthis._disposers.push(this.lineX.events.on(\"positionchanged\", () => {\n\t\t\tthis._handleXLine();\n\t\t}));\n\n\t\tthis._disposers.push(this.lineY.events.on(\"positionchanged\", () => {\n\t\t\tthis._handleYLine();\n\t\t}));\n\n\t\tthis._disposers.push(this.lineX.events.on(\"focus\", () => this._handleLineFocus()));\n\t\tthis._disposers.push(this.lineX.events.on(\"blur\", () => this._handleLineBlur()));\n\n\t\tthis._disposers.push(this.lineY.events.on(\"focus\", () => this._handleLineFocus()));\n\t\tthis._disposers.push(this.lineY.events.on(\"blur\", () => this._handleLineBlur()));\n\n\t\tif ($utils.supports(\"keyboardevents\")) {\n\t\t\tthis._disposers.push($utils.addEventListener(document, \"keydown\", (ev: KeyboardEvent) => {\n\t\t\t\tthis._handleLineMove($utils.getEventKey(ev), ev.ctrlKey);\n\t\t\t}));\n\t\t}\n\t}\n\n\tprotected _setUpTouch(): void {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.plotContainer._display.cancelTouch = this.get(\"behavior\") != \"none\" ? true : false;\n\t\t}\n\t}\n\n\tprotected _handleXLine() {\n\t\tlet x = this.lineX.x();\n\t\tlet visible = true;\n\t\tif (x < 0 || x > this.width()) {\n\t\t\tvisible = false;\n\t\t}\n\t\tthis.lineX.setPrivate(\"visible\", visible);\n\t}\n\n\tprotected _handleYLine() {\n\t\tlet y = this.lineY.y();\n\t\tlet visible = true;\n\t\tif (y < 0 || y > this.height()) {\n\t\t\tvisible = false;\n\t\t}\n\t\tthis.lineY.setPrivate(\"visible\", visible);\n\t}\n\n\tprotected _handleLineMove(key: string, ctrlKey?: boolean) {\n\t\tlet dir: any = \"\";\n\n\t\tconst chart = this.chart;\n\n\t\tlet axis: Axis<AxisRenderer> | undefined;\n\t\tif (chart && chart.xAxes.length) {\n\t\t\tif (this._root.focused(this.lineX)) {\n\t\t\t\tdir = \"positionX\";\n\t\t\t\taxis = chart.xAxes.getIndex(0);\n\t\t\t}\n\t\t\telse if (this._root.focused(this.lineY)) {\n\t\t\t\taxis = chart.yAxes.getIndex(0);\n\t\t\t\tdir = \"positionY\";\n\t\t\t}\n\n\t\t\tlet m = 1;\n\t\t\tif (ctrlKey) {\n\t\t\t\tm = 5;\n\t\t\t}\n\n\t\t\tif (axis) {\n\t\t\t\tlet inversed = axis.get(\"renderer\").get(\"inversed\", false);\n\t\t\t\tlet step;\n\t\t\t\tif (key == \"ArrowRight\" || key == \"ArrowDown\") {\n\t\t\t\t\tstep = 1;\n\t\t\t\t}\n\t\t\t\telse if (key == \"ArrowLeft\" || key == \"ArrowUp\") {\n\t\t\t\t\tstep = -1;\n\t\t\t\t}\n\t\t\t\telse if (key == \"Tab\") {\n\t\t\t\t\tstep = 0;\n\t\t\t\t}\n\n\t\t\t\tif (step != null) {\n\t\t\t\t\tif (inversed) {\n\t\t\t\t\t\tstep *= -1;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set(dir, axis.nextPosition(step * m));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleLineFocus() {\n\t\tthis._alwaysShow = this.get(\"alwaysShow\", false);\n\t\tthis.setAll({\n\t\t\tpositionX: this.getPrivate(\"positionX\", 0),\n\t\t\tpositionY: this.getPrivate(\"positionY\", 0),\n\t\t\talwaysShow: true\n\t\t});\n\n\t\tthis._handleLineMove(\"Tab\");\n\t}\n\n\tprotected _handleLineBlur() {\n\t\tif (this.lineX.isFocus() || this.lineY.isFocus()) {\n\t\t\tthis.setAll({\n\t\t\t\tpositionX: undefined,\n\t\t\t\tpositionY: undefined,\n\t\t\t\talwaysShow: this._alwaysShow\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"xAxis\")) {\n\t\t\tthis._tooltipX = false;\n\t\t\tconst xAxis = this.get(\"xAxis\");\n\n\t\t\tif (xAxis) {\n\t\t\t\tconst tooltip = xAxis.get(\"tooltip\");\n\t\t\t\tif (tooltip) {\n\t\t\t\t\tthis._tooltipX = true;\n\t\t\t\t\tthis._disposers.push(\n\t\t\t\t\t\ttooltip.on(\"pointTo\", () => {\n\t\t\t\t\t\t\tthis._updateXLine(tooltip);\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"yAxis\")) {\n\t\t\tthis._tooltipY = false;\n\t\t\tconst yAxis = this.get(\"yAxis\");\n\n\t\t\tif (yAxis) {\n\t\t\t\tconst tooltip = yAxis.get(\"tooltip\");\n\t\t\t\tif (tooltip) {\n\t\t\t\t\tthis._tooltipY = true;\n\t\t\t\t\tthis._disposers.push(\n\t\t\t\t\t\ttooltip.on(\"pointTo\", () => {\n\t\t\t\t\t\t\tthis._updateYLine(tooltip);\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleSyncWith() {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst syncWith = this.get(\"syncWith\");\n\t\t\tconst otherCharts: Array<XYChart> = [];\n\t\t\tif (syncWith) {\n\t\t\t\t$array.each(syncWith, (cursor) => {\n\t\t\t\t\tconst chart = cursor.chart;\n\t\t\t\t\tif (chart) {\n\t\t\t\t\t\totherCharts.push(chart)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\tchart._otherCharts = otherCharts;\n\t\t}\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tthis._handleSyncWith();\n\n\t\tif (this.isDirty(\"positionX\") || this.isDirty(\"positionY\")) {\n\t\t\tconst positionX = this.get(\"positionX\");\n\t\t\tconst positionY = this.get(\"positionY\");\n\n\t\t\tif (positionX == null && positionY == null) {\n\t\t\t\tthis.hide(0);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._movePoint = this.toGlobal(this._getPoint(this.get(\"positionX\", 0), this.get(\"positionY\", 0)));\n\t\t\t\tthis.handleMove();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateXLine(tooltip: Tooltip) {\n\t\tlet x = $math.round(this._display.toLocal(tooltip.get(\"pointTo\", { x: 0, y: 0 })).x, 3);\n\t\tif (this._toX != x) {\n\t\t\tthis.lineX.animate({ key: \"x\", to: x, duration: tooltip.get(\"animationDuration\", 0), easing: tooltip.get(\"animationEasing\") });\n\t\t\tthis._toX = x;\n\t\t}\n\t}\n\n\tprotected _updateYLine(tooltip: Tooltip) {\n\t\tlet y = $math.round(this._display.toLocal(tooltip.get(\"pointTo\", { x: 0, y: 0 })).y, 3);\n\t\tif (this._toY != y) {\n\t\t\tthis.lineY.animate({ key: \"y\", to: y, duration: tooltip.get(\"animationDuration\", 0), easing: tooltip.get(\"animationEasing\") });\n\t\t\tthis._toY = y;\n\t\t}\n\t}\n\n\tprotected _drawLines() {\n\t\tthis.lineX.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(0, this.height());\n\t\t})\n\t\tthis.lineY.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(0, 0);\n\t\t\tdisplay.lineTo(this.width(), 0);\n\t\t})\n\t}\n\n\tpublic updateCursor() {\n\t\tif (this.get(\"alwaysShow\")) {\n\t\t\tthis._movePoint = this.toGlobal(this._getPoint(this.get(\"positionX\", 0), this.get(\"positionY\", 0)));\n\t\t}\n\t\tthis.handleMove();\n\t}\n\n\tpublic _setChart(chart: XYChart): void {\n\t\tthis.chart = chart;\n\n\t\tthis._handleSyncWith();\n\n\t\tconst plotContainer = chart.plotContainer;\n\n\t\tthis.events.on(\"boundschanged\", () => {\n\t\t\tthis._disposers.push(this.setTimeout(() => {\n\t\t\t\tthis.updateCursor();\n\t\t\t}, 50))\n\t\t})\n\n\t\t//this._display.interactive = true;\n\t\tif ($utils.supports(\"touchevents\")) {\n\t\t\tthis._disposers.push(plotContainer.events.on(\"click\", (event) => {\n\t\t\t\tif ($utils.isTouchEvent(event.originalEvent)) {\n\t\t\t\t\tthis._handleMove(event);\n\t\t\t\t}\n\t\t\t}));\n\t\t\tthis._setUpTouch();\n\t\t}\n\n\t\tthis._disposers.push(plotContainer.events.on(\"pointerdown\", (event) => {\n\t\t\tthis._handleCursorDown(event);\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"globalpointerup\", (event) => {\n\t\t\tthis._handleCursorUp(event);\n\t\t\tif (!event.native && !this.isHidden()) {\n\t\t\t\tthis._handleMove(event);\n\t\t\t}\n\t\t}));\n\n\t\tthis._disposers.push(plotContainer.events.on(\"globalpointermove\", (event) => {\n\t\t\tif (!this.get(\"syncWith\")) {\n\t\t\t\tif ($object.keys(plotContainer._downPoints).length == 0 && !event.native && this.isHidden()) {\n\t\t\t\t\t// Ignore mouse movement if it originates on outside element and\n\t\t\t\t\t// we're not dragging.\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._handleMove(event);\n\n\t\t\tif (Math.hypot(this._lastPoint2.x - event.point.x, this._lastPoint2.y - event.point.y) > 1) {\n\t\t\t\tthis._handleLineBlur();\n\t\t\t\tthis._lastPoint2 = event.point;\n\t\t\t}\n\t\t}));\n\n\t\tconst parent = this.parent;\n\t\tif (parent) {\n\t\t\tparent.children.moveValue(this.selection);\n\t\t}\n\t}\n\n\tprotected _inPlot(point: IPoint): boolean {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.inPlot(point);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _handleCursorDown(event: ISpritePointerEvent) {\n\t\tif ((event.originalEvent as any).button == 2) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst rootPoint = event.point;\n\t\tlet local = this._display.toLocal(rootPoint);\n\t\tconst chart = this.chart;\n\n\t\tthis.selection.set(\"draw\", () => { });\n\n\t\tif (chart && this._inPlot(local)) {\n\t\t\tthis._downPoint = local;\n\n\t\t\tif (this.get(\"behavior\") != \"none\") {\n\t\t\t\tthis.selection.show();\n\n\t\t\t\tconst type = \"selectstarted\";\n\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this, originalEvent: event.originalEvent });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet positionX = this._getPosition(local).x;\n\t\t\tlet positionY = this._getPosition(local).y;\n\n\t\t\tthis.setPrivate(\"downPositionX\", positionX);\n\t\t\tthis.setPrivate(\"downPositionY\", positionY);\n\t\t}\n\t}\n\n\tprotected _handleCursorUp(event: ISpritePointerEvent) {\n\t\t// TODO: handle multitouch\n\t\tif (this._downPoint) {\n\t\t\tconst behavior = this.get(\"behavior\", \"none\");\n\t\t\tif (behavior != \"none\") {\n\t\t\t\tif (behavior.charAt(0) === \"z\") {\n\t\t\t\t\tthis.selection.hide();\n\t\t\t\t}\n\n\t\t\t\tconst rootPoint = event.point;\n\t\t\t\tlet local = this._display.toLocal(rootPoint);\n\n\t\t\t\tconst downPoint = this._downPoint;\n\t\t\t\tconst moveThreshold = this.get(\"moveThreshold\", 1);\n\t\t\t\tif (local && downPoint) {\n\t\t\t\t\tlet dispatch = false;\n\t\t\t\t\tif (behavior === \"zoomX\" || behavior === \"zoomXY\" || behavior === \"selectX\" || behavior === \"selectXY\") {\n\t\t\t\t\t\tif (Math.abs(local.x - downPoint.x) > moveThreshold) {\n\t\t\t\t\t\t\tdispatch = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (behavior === \"zoomY\" || behavior === \"zoomXY\" || behavior === \"selectY\" || behavior === \"selectXY\") {\n\t\t\t\t\t\tif (Math.abs(local.y - downPoint.y) > moveThreshold) {\n\t\t\t\t\t\t\tdispatch = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (dispatch) {\n\t\t\t\t\t\tconst type = \"selectended\";\n\t\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this, originalEvent: event.originalEvent });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst type = \"selectcancelled\";\n\t\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this, originalEvent: event.originalEvent });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._downPoint = undefined;\n\t}\n\n\tprotected _handleMove(event: ISpritePointerEvent) {\n\t\tif (this.getPrivate(\"visible\")) {\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart && $object.keys(chart.plotContainer._downPoints).length > 1) {\n\t\t\t\tthis.set(\"forceHidden\", true)\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"forceHidden\", false)\n\t\t\t}\n\n\t\t\t// TODO: handle multitouch\n\t\t\tconst rootPoint = event.point;\n\t\t\tconst lastPoint = this._lastPoint;\n\n\t\t\tif (Math.round(lastPoint.x) === Math.round(rootPoint.x) && Math.round(lastPoint.y) === Math.round(rootPoint.y)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._lastPoint = rootPoint;\n\t\t\tthis.setPrivate(\"lastPoint\", rootPoint);\n\n\t\t\tthis.handleMove({ x: rootPoint.x, y: rootPoint.y }, false, event.originalEvent);\n\t\t}\n\t}\n\n\tprotected _getPosition(point: IPoint): IPoint {\n\t\treturn { x: point.x / this.width(), y: point.y / this.height() };\n\t}\n\n\t/**\n\t * Moves the cursor to X/Y coordinates within chart container (`point`).\n\t *\n\t * If `skipEvent` parameter is set to `true`, the move will not invoke\n\t * the `\"cursormoved\"` event.\n\t *\n\t * @param  point      X/Y to move cursor to\n\t * @param  skipEvent  Do not fire \"cursormoved\" event\n\t */\n\tpublic handleMove(point?: IPoint, skipEvent?: boolean, originalEvent?: IPointerEvent) {\n\t\tif (!point) {\n\t\t\tpoint = this._movePoint;\n\t\t}\n\n\t\tconst alwaysShow = this.get(\"alwaysShow\");\n\n\t\tif (!point) {\n\t\t\tthis.hide(0);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._movePoint = point;\n\t\tlet local = this._display.toLocal(point);\n\t\tlet chart = this.chart;\n\n\t\tif (chart && (this._inPlot(local) || this._downPoint)) {\n\t\t\tchart._movePoint = point;\n\n\t\t\tif (this.isHidden()) {\n\t\t\t\tthis.show();\n\n\t\t\t\tconst behavior = this.get(\"behavior\", \"\");\n\t\t\t\tif (behavior.charAt(0) == \"z\") {\n\t\t\t\t\tthis.selection.set(\"draw\", () => { });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet x = local.x;\n\t\t\tlet y = local.y;\n\n\t\t\tlet xyPos = this._getPosition(local);\n\n\t\t\tthis.setPrivate(\"point\", local);\n\n\t\t\tlet snapToSeries = this.get(\"snapToSeries\");\n\n\t\t\tif (this._downPoint) {\n\t\t\t\tsnapToSeries = undefined;\n\t\t\t}\n\n\t\t\tlet userPositionX = this.get(\"positionX\");\n\t\t\tlet positionX = xyPos.x;\n\n\t\t\tif ($type.isNumber(userPositionX)) {\n\t\t\t\tpositionX = userPositionX;\n\t\t\t}\n\n\t\t\tlet userPositionY = this.get(\"positionY\");\n\t\t\tlet positionY = xyPos.y;\n\n\t\t\tif ($type.isNumber(userPositionY)) {\n\t\t\t\tpositionY = userPositionY;\n\t\t\t}\n\n\t\t\tthis.setPrivate(\"positionX\", positionX);\n\t\t\tthis.setPrivate(\"positionY\", positionY);\n\n\t\t\tconst xy = this._getPoint(positionX, positionY);\n\t\t\tx = xy.x;\n\t\t\ty = xy.y;\n\n\t\t\tchart.xAxes.each((axis) => {\n\t\t\t\taxis._handleCursorPosition(positionX, snapToSeries);\n\t\t\t\tif (alwaysShow) {\n\t\t\t\t\taxis.handleCursorShow();\n\t\t\t\t}\n\t\t\t})\n\t\t\tchart.yAxes.each((axis) => {\n\t\t\t\taxis._handleCursorPosition(positionY, snapToSeries);\n\t\t\t\tif (alwaysShow) {\n\t\t\t\t\taxis.handleCursorShow();\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (!skipEvent) {\n\t\t\t\tchart._handleCursorPosition();\n\n\t\t\t\tconst type = \"cursormoved\";\n\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this, point: point, originalEvent: originalEvent });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._updateLines(x, y);\n\n\t\t\tchart.arrangeTooltips();\n\t\t}\n\t\telse if (!this._downPoint) {\n\t\t\tif (!alwaysShow) {\n\t\t\t\tthis.hide(0);\n\n\t\t\t\tconst type = \"cursorhidden\";\n\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._downPoint && this.get(\"behavior\") != \"none\") {\n\t\t\tthis._updateSelection(local)\n\t\t}\n\t}\n\n\tprotected _getPoint(positionX: number, positionY: number): IPoint {\n\t\treturn { x: this.width() * positionX, y: this.height() * positionY };\n\t}\n\n\n\tprotected _updateLines(x: number, y: number) {\n\t\tif (!this._tooltipX) {\n\t\t\tthis.lineX.set(\"x\", x);\n\t\t}\n\t\tif (!this._tooltipY) {\n\t\t\tthis.lineY.set(\"y\", y);\n\t\t}\n\n\t\tthis._drawLines();\n\t}\n\n\tprotected _updateSelection(point: IPoint) {\n\t\tconst selection = this.selection;\n\t\tconst behavior = this.get(\"behavior\");\n\t\tconst w = this.width();\n\t\tconst h = this.height();\n\n\t\tif (point.x < 0) {\n\t\t\tpoint.x = 0;\n\t\t}\n\n\t\tif (point.x > w) {\n\t\t\tpoint.x = w;\n\t\t}\n\n\t\tif (point.y < 0) {\n\t\t\tpoint.y = 0;\n\t\t}\n\n\t\tif (point.y > h) {\n\t\t\tpoint.y = h;\n\t\t}\n\n\t\tselection.set(\"draw\", (display) => {\n\t\t\tconst downPoint = this._downPoint;\n\t\t\tif (downPoint) {\n\t\t\t\tif (behavior === \"zoomXY\" || behavior === \"selectXY\") {\n\t\t\t\t\tdisplay.moveTo(downPoint.x, downPoint.y);\n\t\t\t\t\tdisplay.lineTo(downPoint.x, point.y);\n\t\t\t\t\tdisplay.lineTo(point.x, point.y);\n\t\t\t\t\tdisplay.lineTo(point.x, downPoint.y);\n\t\t\t\t\tdisplay.lineTo(downPoint.x, downPoint.y);\n\t\t\t\t}\n\t\t\t\telse if (behavior === \"zoomX\" || behavior === \"selectX\") {\n\t\t\t\t\tdisplay.moveTo(downPoint.x, 0);\n\t\t\t\t\tdisplay.lineTo(downPoint.x, h);\n\t\t\t\t\tdisplay.lineTo(point.x, h);\n\t\t\t\t\tdisplay.lineTo(point.x, 0);\n\t\t\t\t\tdisplay.lineTo(downPoint.x, 0);\n\t\t\t\t}\n\t\t\t\telse if (behavior === \"zoomY\" || behavior === \"selectY\") {\n\t\t\t\t\tdisplay.moveTo(0, downPoint.y);\n\t\t\t\t\tdisplay.lineTo(w, downPoint.y);\n\t\t\t\t\tdisplay.lineTo(w, point.y);\n\t\t\t\t\tdisplay.lineTo(0, point.y);\n\t\t\t\t\tdisplay.lineTo(0, downPoint.y);\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tprotected _onHide() {\n\t\tif (this.isHidden()) {\n\t\t\tlet chart = this.chart;\n\t\t\tif (chart) {\n\n\t\t\t\tchart.xAxes.each((axis) => {\n\t\t\t\t\taxis.handleCursorHide();\n\t\t\t\t})\n\t\t\t\tchart.yAxes.each((axis) => {\n\t\t\t\t\taxis.handleCursorHide();\n\t\t\t\t})\n\t\t\t\tchart.series.each((series) => {\n\t\t\t\t\tseries.handleCursorHide();\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tsuper._onHide();\n\t}\n\n\tprotected _onShow() {\n\t\tif (!this.isHidden()) {\n\t\t\tlet chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart.xAxes.each((axis) => {\n\t\t\t\t\taxis.handleCursorShow();\n\t\t\t\t})\n\t\t\t\tchart.yAxes.each((axis) => {\n\t\t\t\t\taxis.handleCursorShow();\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tsuper._onShow();\n\t}\n\n\tprotected _dispose() {\n\t\tsuper._dispose();\n\t\tthis.selection.dispose();\n\t}\n}\n","import { DataItem } from \"../../../core/render/Component\";\nimport type { AxisRenderer } from \"./AxisRenderer\";\nimport type { XYSeries, IXYSeriesDataItem } from \"../series/XYSeries\";\nimport { ValueAxis, IValueAxisSettings, IValueAxisPrivate, IValueAxisDataItem, IMinMaxStep, IValueAxisEvents } from \"./ValueAxis\";\nimport * as $type from \"../../../core/util/Type\";\nimport * as $math from \"../../../core/util/Math\";\nimport * as $order from \"../../../core/util/Order\";\nimport * as $array from \"../../../core/util/Array\";\nimport * as $object from \"../../../core/util/Object\";\nimport * as $utils from \"../../../core/util/Utils\";\nimport * as $time from \"../../../core/util/Time\";\nimport type { ITimeInterval } from \"../../../core/util/Time\";\nimport type { TimeUnit } from \"../../../core/util/Time\";\n\nexport interface IDateAxisSettings<R extends AxisRenderer> extends IValueAxisSettings<R> {\n\n\t/**\n\t * Indicates granularity of data.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Data_granularity} for more info\n\t */\n\tbaseInterval: ITimeInterval;\n\n\t/**\n\t * Relative location of where axis cell starts: 0 - beginning, 1 - end.\n\t *\n\t * IMPORTANT: `startLocation` is not supported by [[GaplessDateAxis]].\n\t *\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location of where axis cell ends: 0 - beginning, 1 - end.\n\t *\n\t * IMPORTANT: `endLocation` is not supported by [[GaplessDateAxis]].\n\t * \n\t * @default 1\n\t */\n\tendLocation?: number;\n\n\t/**\n\t * Should axis group data items togeter dynamically?\n\t *\n\t * @default false\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupData?: boolean;\n\n\t/**\n\t * Maximum number of data items in the view before data grouping kicks in.\n\t *\n\t * @default 500\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupCount?: number;\n\n\t/**\n\t * Force data item grouping to specific interval. This interval must be within groupIntervals array for this to work.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupInterval?: ITimeInterval;\n\n\t/**\n\t * A list of intervals the axis is allowed to group data items into.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Dynamic_data_item_grouping} for more info\n\t */\n\tgroupIntervals?: Array<ITimeInterval>;\n\n\t/**\n\t * A list of intervals the axis is allowed to show grid/labels on.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Grid_granularity} for more info\n\t */\n\tgridIntervals?: Array<ITimeInterval>;\n\n\t/**\n\t * Display \"period change\" labels using different format.\n\t *\n\t * If set to `true`, will use `periodChangeDateFormats` instead\n\t * of `dateFormats` for such labels, e.g. for month start.\n\t *\n\t * @default true\n\t */\n\tmarkUnitChange?: boolean;\n\n\t/**\n\t * Date formats used for intermediate labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tdateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * Date formats used for minor grid labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Minor_grid_formats} for more info\n\t * @since 5.6.0\n\t */\n\tminorDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * Date formats used for \"period change\" labels.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Date_formats} for more info\n\t */\n\tperiodChangeDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * A date format to use for axis tooltip.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t */\n\ttooltipDateFormat?: string | Intl.DateTimeFormatOptions;\n\n\t/**\n\t * Time unit-specific formats to use for axis tooltip.\n\t * \n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t * @since 5.1.4\n\t */\n\ttooltipDateFormats?: { [index: string]: string | Intl.DateTimeFormatOptions };\n\n\t/**\n\t * A value which indicates relative position within axis cell to get timestamp\n\t * for the tooltip from.\n\t *\n\t * Values are from `-1` to `1`.\n\t *\n\t * If not set, it will use `tooltipLocation` value, if `tooltipLocation`` is\n\t * not set, it will use -0.5.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/#Axis_tooltip} for more info\n\t * @since 5.1.4\n\t */\n\ttooltipIntervalOffset?: number;\n}\n\nexport interface IDateAxisDataItem extends IValueAxisDataItem {\n}\n\nexport interface IDateAxisPrivate extends IValueAxisPrivate {\n\n\t/**\n\t * Current group interval.\n\t */\n\tgroupInterval?: ITimeInterval;\n\n\t/**\n\t * Current base interval.\n\t */\n\tbaseInterval: ITimeInterval;\n\n\t/**\n\t * Current grid interval.\n\t */\n\tgridInterval: ITimeInterval;\n}\n\nexport interface IDateAxisEvents extends IValueAxisEvents {\n\n\t/**\n\t * Kicks in when data grouping is on, and current group interval changes, e.g. via zooming the chart.\n\t *\n\t * @since 5.2.43\n\t */\n\tgroupintervalchanged: {}\n\n}\n\n/**\n * Creates a date axis.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/xy-chart/axes/date-axis/} for more info\n * @important\n */\nexport class DateAxis<R extends AxisRenderer> extends ValueAxis<R> {\n\tpublic static className: string = \"DateAxis\";\n\tpublic static classNames: Array<string> = ValueAxis.classNames.concat([DateAxis.className]);\n\n\tdeclare public _settings: IDateAxisSettings<R>;\n\tdeclare public _privateSettings: IDateAxisPrivate;\n\tdeclare public _dataItemSettings: IDateAxisDataItem;\n\tdeclare public _events: IDateAxisEvents;\n\n\tprotected _dataGrouped: boolean = false;\n\tprotected _seriesDataGrouped: boolean = false;\n\tprotected _groupingCalculated: boolean = false;\n\tprotected _intervalDuration: number = 1;\n\tprotected _baseDuration: number = 1;\n\n\tprotected _intervalMax: { [index: string]: number } = {};\n\tprotected _intervalMin: { [index: string]: number } = {};\n\n\tpublic _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"axis\"]);\n\t\tsuper._afterNew();\n\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\tthis.on(\"baseInterval\", () => {\n\t\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\t})\n\t}\n\n\tprotected _setBaseInterval(interval: ITimeInterval) {\n\t\tthis.setPrivateRaw(\"baseInterval\", interval);\n\t\tthis._baseDuration = $time.getIntervalDuration(interval);\n\t}\n\n\tprotected _fixZoomFactor() {\n\t\tconst maxZoomFactor = this.get(\"maxZoomFactor\");\n\t\tif (maxZoomFactor != null && maxZoomFactor != Infinity) {\n\t\t\tthis.setPrivateRaw(\"maxZoomFactor\", maxZoomFactor);\n\t\t}\n\t\telse {\n\t\t\tthis.setPrivateRaw(\"maxZoomFactor\", Math.round((this.getPrivate(\"max\", 0) - this.getPrivate(\"min\", 0)) / this.baseMainDuration()));\n\t\t}\n\t}\n\n\tprotected _groupData() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif (($type.isNumber(min) && $type.isNumber(max))) {\n\n\t\t\tthis._fixZoomFactor();\n\n\t\t\tconst groupInterval = this.getPrivate(\"groupInterval\")!;\n\t\t\tif (groupInterval) {\n\t\t\t\tthis._setBaseInterval(groupInterval);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._setBaseInterval(this.get(\"baseInterval\"));\n\t\t\t}\n\n\n\t\t\tif (this.isDirty(\"groupInterval\")) {\n\t\t\t\tlet groupInterval = this.get(\"groupInterval\")!;\n\t\t\t\tif (groupInterval) {\n\t\t\t\t\tthis.setRaw(\"groupIntervals\", [groupInterval]);\n\t\t\t\t\tthis._handleRangeChange();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.isDirty(\"groupData\")) {\n\t\t\t\tif (!this._dataGrouped) {\n\t\t\t\t\tif (this.get(\"groupData\")) {\n\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\tthis._groupSeriesData(series);\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tthis._handleRangeChange();\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\t\t\t\t\tlet mainDataSetId: string = baseInterval.timeUnit + baseInterval.count;\n\t\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\t\tseries.setDataSet(mainDataSetId);\n\t\t\t\t\t\t\tseries.resetGrouping();\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tthis._setBaseInterval(baseInterval);\n\t\t\t\t\t\tthis.setPrivateRaw(\"groupInterval\", undefined);\n\t\t\t\t\t\tthis.markDirtyExtremes();\n\t\t\t\t\t}\n\t\t\t\t\tthis._dataGrouped = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic _groupSeriesData(series: XYSeries) {\n\t\tif (this.get(\"groupData\") && !series.get(\"groupDataDisabled\")) {\n\n\t\t\tthis._dataGrouped = true; // helps to avoid double grouping\n\n\t\t\tthis._seriesDataGrouped = true;\n\n\t\t\t// make array of intervals which will be used;\n\t\t\tlet intervals: ITimeInterval[] = [];\n\t\t\tlet baseDuration = this.baseMainDuration();\n\n\t\t\tlet groupIntervals = this.get(\"groupIntervals\")!;\n\t\t\tif (groupIntervals) { }\n\t\t\t$array.each(groupIntervals, (interval) => {\n\t\t\t\tlet intervalDuration = $time.getIntervalDuration(interval);\n\t\t\t\tif (intervalDuration > baseDuration) {\n\t\t\t\t\tintervals.push(interval);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tseries._dataSets = {};\n\n\t\t\tconst key = this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!;\n\t\t\tlet fields: Array<string>;\n\n\t\t\tconst baseAxis = series.get(\"baseAxis\");\n\n\t\t\tif (series.get(\"xAxis\") === baseAxis) {\n\t\t\t\tfields = series._valueYFields;\n\t\t\t}\n\t\t\telse if (series.get(\"yAxis\") === baseAxis) {\n\t\t\t\tfields = series._valueXFields;\n\t\t\t}\n\n\t\t\tlet dataItems = series._mainDataItems;\n\t\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\t\tlet mainDataSetId: string = baseInterval.timeUnit + baseInterval.count;\n\n\t\t\tseries._dataSets[mainDataSetId] = dataItems;\n\n\t\t\tconst groupCallback = series.get(\"groupDataCallback\");\n\t\t\tlet groupOriginals = series.get(\"groupDataWithOriginals\", false);\n\t\t\tif (groupCallback) {\n\t\t\t\tgroupOriginals = true;\n\t\t\t}\n\n\t\t\t$array.each(intervals, (interval) => {\n\n\t\t\t\tlet previousTime = -Infinity;\n\t\t\t\tlet dataSetId = interval.timeUnit + interval.count;\n\t\t\t\tseries._dataSets[dataSetId] = [];\n\n\t\t\t\tlet newDataItem: DataItem<IXYSeriesDataItem>;\n\n\t\t\t\tlet sum: { [index: string]: number } = {};\n\t\t\t\tlet count: { [index: string]: number } = {};\n\n\t\t\t\tlet groupFieldValues: { [index: string]: string } = {};\n\t\t\t\tlet workingFields: { [index: string]: string } = {};\n\n\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\tsum[field] = 0;\n\t\t\t\t\tcount[field] = 0;\n\t\t\t\t\tgroupFieldValues[field] = series.get((field + \"Grouped\") as any);\n\t\t\t\t\tworkingFields[field] = field + \"Working\";\n\t\t\t\t})\n\n\t\t\t\tlet intervalDuration = $time.getDuration(interval.timeUnit);\n\n\t\t\t\tlet firstItem = dataItems[0];\n\t\t\t\tlet firstTime: any;\n\t\t\t\tif (firstItem) {\n\t\t\t\t\tfirstTime = dataItems[0].get(key as any);\n\t\t\t\t}\n\n\t\t\t\tlet prevNewDataItem: DataItem<IXYSeriesDataItem> | undefined;\n\t\t\t\t$array.each(dataItems, (dataItem) => {\n\t\t\t\t\tlet time = dataItem.get(key as any);\n\t\t\t\t\t//let roundedTime = $time.round(new Date(time), interval.timeUnit, interval.count, firstDay, utc, firstDate, timezone).getTime();\n\t\t\t\t\tlet roundedTime = $time.roun(time, interval.timeUnit, interval.count, this._root, firstTime);\n\t\t\t\t\tlet dataContext: any;\n\n\t\t\t\t\tif (previousTime < roundedTime - intervalDuration / 24) {\n\t\t\t\t\t\tdataContext = $object.copy(dataItem.dataContext);\n\n\t\t\t\t\t\tnewDataItem = new DataItem(series, dataContext, series._makeDataItem(dataContext));\n\t\t\t\t\t\tnewDataItem.setRaw(key as any, roundedTime);\n\n\t\t\t\t\t\tseries._dataSets[dataSetId].push(newDataItem);\n\n\t\t\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\t\t\tlet value = dataItem.get(field as any);\n\t\t\t\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(workingFields[field] as any, value);\n\t\t\t\t\t\t\t\tcount[field] = 1;\n\t\t\t\t\t\t\t\tsum[field] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tsum[field] = 0;\n\t\t\t\t\t\t\t\tcount[field] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (groupOriginals) {\n\t\t\t\t\t\t\tnewDataItem.set(\"originals\", [dataItem]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (groupCallback && prevNewDataItem) {\n\t\t\t\t\t\t\tgroupCallback(prevNewDataItem, interval);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tprevNewDataItem = newDataItem;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t$array.each(fields, (field) => {\n\t\t\t\t\t\t\tlet groupKey = groupFieldValues[field];\n\t\t\t\t\t\t\tlet value = dataItem.get(field as any);\n\n\t\t\t\t\t\t\tif (value != null) {\n\n\t\t\t\t\t\t\t\tlet currentValue = newDataItem.get(field as any);\n\n\t\t\t\t\t\t\t\tswitch (groupKey) {\n\t\t\t\t\t\t\t\t\tcase \"close\":\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"sum\":\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, currentValue + value);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"open\":\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"low\":\n\t\t\t\t\t\t\t\t\t\tif (value < currentValue) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"high\":\n\t\t\t\t\t\t\t\t\t\tif (value > currentValue) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"average\":\n\t\t\t\t\t\t\t\t\t\tcount[field]++;\n\t\t\t\t\t\t\t\t\t\tsum[field] += value;\n\t\t\t\t\t\t\t\t\t\tlet average = sum[field] / count[field];\n\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, average);\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase \"extreme\":\n\t\t\t\t\t\t\t\t\t\tif (Math.abs(value) > Math.abs(currentValue)) {\n\t\t\t\t\t\t\t\t\t\t\tnewDataItem.setRaw(field as any, value);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tnewDataItem.setRaw(workingFields[field] as any, newDataItem.get(field as any));\n\t\t\t\t\t\t\t\tlet dataContext: any = $object.copy(dataItem.dataContext);\n\t\t\t\t\t\t\t\tdataContext[key as any] = roundedTime;\n\t\t\t\t\t\t\t\tnewDataItem.dataContext = dataContext;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (groupOriginals) {\n\t\t\t\t\t\t\tnewDataItem.get(\"originals\")!.push(dataItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpreviousTime = roundedTime;\n\t\t\t\t})\n\n\t\t\t\tif (groupCallback && prevNewDataItem) {\n\t\t\t\t\tgroupCallback(prevNewDataItem, interval);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\tif (series._dataSetId) {\n\t\t\t\tseries.setDataSet(series._dataSetId);\n\t\t\t}\n\t\t\tthis.markDirtySize();\n\t\t\t// solves problem if new series was added\n\t\t\tif (this._seriesAdded) {\n\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\tthis.markDirtySize();\n\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._groupingCalculated = false;\n\t\tthis._dataGrouped = false;\n\t}\n\n\t/**\n\t * Returns a time interval axis would group data to for a specified duration.\n\t *\n\t * @since 5.2.1\n\t */\n\tpublic getGroupInterval(duration: number): ITimeInterval {\n\t\tlet baseInterval = this.get(\"baseInterval\");\n\t\tlet groupInterval = $time.chooseInterval(0, duration, this.get(\"groupCount\", Infinity), this.get(\"groupIntervals\")!);\n\t\tif ($time.getIntervalDuration(groupInterval) < $time.getIntervalDuration(baseInterval)) {\n\t\t\tgroupInterval = { ...baseInterval };\n\t\t}\n\t\treturn groupInterval;\n\t}\n\n\t/**\n\t * Return `max` of a specified time interval.\n\t * \n\t * Will work only if the axis was grouped to this interval at least once.\n\t * \n\t * @since 5.2.1\n\t * @param   interval  Interval\n\t * @return            Max\n\t */\n\tpublic getIntervalMax(interval: ITimeInterval): number {\n\t\treturn this._intervalMax[interval.timeUnit + interval.count];\n\t}\n\n\t/**\n\t * Return `min` of a specified time interval.\n\t * \n\t * Will work only if the axis was grouped to this interval at least once.\n\t * \n\t * @since 5.2.1\n\t * @param   interval  Interval\n\t * @return            Min\n\t */\n\tpublic getIntervalMin(interval: ITimeInterval): number {\n\t\treturn this._intervalMin[interval.timeUnit + interval.count];\n\t}\n\n\tprotected _handleRangeChange() {\n\t\tsuper._handleRangeChange();\n\n\t\tlet selectionMin = Math.round(this.getPrivate(\"selectionMin\")! as number);\n\t\tlet selectionMax = Math.round(this.getPrivate(\"selectionMax\")! as number);\n\n\t\tif ($type.isNumber(selectionMin) && $type.isNumber(selectionMax)) {\n\n\t\t\tif (this.get(\"endLocation\") == 0) {\n\t\t\t\tselectionMax += 1;\n\t\t\t}\n\n\t\t\tif (this.get(\"groupData\") && !this._groupingCalculated) {\n\t\t\t\tthis._groupingCalculated = true;\n\n\t\t\t\tlet groupInterval = this.get(\"groupInterval\");\n\t\t\t\tlet current = this.getPrivate(\"groupInterval\");\n\n\t\t\t\tlet modifiedDifference = (selectionMax - selectionMin) + (this.get(\"startLocation\", 0) + (1 - this.get(\"endLocation\", 1)) * this.baseDuration());\n\n\t\t\t\tif (current) {\n\t\t\t\t\tlet duration = $time.getIntervalDuration(current);\n\t\t\t\t\tmodifiedDifference = Math.ceil(modifiedDifference / duration) * duration;\n\t\t\t\t}\n\n\t\t\t\tif (!groupInterval) {\n\t\t\t\t\tgroupInterval = this.getGroupInterval(modifiedDifference);\n\t\t\t\t}\n\n\t\t\t\tif (groupInterval && (!current || (current.timeUnit !== groupInterval.timeUnit || current.count !== groupInterval.count) || this._seriesDataGrouped)) {\n\t\t\t\t\tthis._seriesDataGrouped = false;\n\t\t\t\t\tthis.setPrivateRaw(\"groupInterval\", groupInterval);\n\t\t\t\t\tthis._setBaseInterval(groupInterval)\n\n\n\t\t\t\t\tlet newId = groupInterval.timeUnit + groupInterval.count;\n\t\t\t\t\t$array.each(this.series, (series) => {\n\t\t\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\t\t\tseries.setDataSet(newId);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tthis.markDirtyExtremes();\n\n\t\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\t\tthis._root.events.once(\"frameended\", () => {\n\t\t\t\t\t\t\tconst type = \"groupintervalchanged\";\n\t\t\t\t\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\t\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.get(\"baseAxis\") === this) {\n\t\t\t\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\n\t\t\t\t\tconst start = $array.getFirstSortedIndex(series.dataItems, (dataItem) => {\n\t\t\t\t\t\treturn $order.compare(dataItem.get(fieldName), selectionMin);\n\t\t\t\t\t});\n\n\t\t\t\t\tlet startIndex = start.index;\n\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tstartIndex -= 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tselectionMax += this.baseDuration() * (1 - this.get(\"endLocation\", 1));\n\n\t\t\t\t\tconst end = $array.getSortedIndex(series.dataItems, (dataItem) => {\n\t\t\t\t\t\treturn $order.compare(dataItem.get(fieldName), selectionMax);\n\t\t\t\t\t});\n\n\t\t\t\t\tlet endIndex = end.index;\n\t\t\t\t\tlet endIndex2 = endIndex;\n\n\t\t\t\t\tif (endIndex2 > 1) {\n\t\t\t\t\t\tendIndex2--;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst firstDataItem = series.dataItems[startIndex];\n\t\t\t\t\tconst lastDataItem = series.dataItems[endIndex2];\n\n\t\t\t\t\tlet lastDate: number | undefined;\n\t\t\t\t\tlet firstDate: number | undefined;\n\t\t\t\t\tif (firstDataItem) {\n\t\t\t\t\t\tfirstDate = firstDataItem.get(fieldName);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lastDataItem) {\n\t\t\t\t\t\tlastDate = lastDataItem.get(fieldName);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet outOfSelection = false;\n\t\t\t\t\tif (lastDate != null && firstDate != null) {\n\t\t\t\t\t\tif (lastDate < selectionMin || firstDate > selectionMax) {\n\t\t\t\t\t\t\toutOfSelection = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tseries.setPrivate(\"outOfSelection\", outOfSelection);\n\t\t\t\t\tseries.setPrivate(\"startIndex\", startIndex);\n\t\t\t\t\tseries.setPrivate(\"adjustedStartIndex\", series._adjustStartIndex(startIndex));\n\t\t\t\t\tseries.setPrivate(\"endIndex\", endIndex);\n\t\t\t\t\tthis.root.events.once(\"frameended\", () => {\n\t\t\t\t\t\tseries._markDirtyPrivateKey(\"adjustedStartIndex\");\n\t\t\t\t\t})\n\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _adjustMinMax(min: number, max: number, gridCount: number, _strictMode?: boolean): IMinMaxStep {\n\t\treturn { min: min, max: max, step: (max - min) / gridCount };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic intervalDuration(): number {\n\t\treturn this._intervalDuration;\n\t}\n\n\tprotected _saveMinMax(min: number, max: number) {\n\t\tlet groupInterval = this.getPrivate(\"groupInterval\");\n\n\t\tif (!groupInterval) {\n\t\t\tgroupInterval = this.get(\"baseInterval\");\n\t\t}\n\n\t\tlet id = groupInterval.timeUnit + groupInterval.count;\n\t\tthis._intervalMin[id] = min;\n\t\tthis._intervalMax[id] = max;\n\t}\n\n\tprotected _getM(timeUnit: TimeUnit) {\n\t\tif (timeUnit == \"month\" || timeUnit == \"year\" || timeUnit == \"day\") {\n\t\t\treturn 1.05;\n\t\t}\n\t\treturn 1.01;\n\t}\n\n\tprotected _getMinorInterval(interval: ITimeInterval): ITimeInterval | undefined {\n\t\tlet minorGridInterval: ITimeInterval | undefined;\n\t\tlet count = interval.count;\n\t\tlet timeUnit = interval.timeUnit;\n\t\tif (count > 1) {\n\t\t\tif (count == 10) {\n\t\t\t\tcount = 5;\n\t\t\t}\n\t\t\telse if (count == 15) {\n\t\t\t\tcount = 5;\n\t\t\t}\n\t\t\telse if (count == 12) {\n\t\t\t\tcount = 2;\n\t\t\t}\n\t\t\telse if (count == 6) {\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\telse if (count == 30) {\n\t\t\t\tcount = 10;\n\t\t\t}\n\t\t\telse if (count < 10) {\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\tminorGridInterval = { timeUnit: timeUnit, count: count };\n\t\t}\n\t\tif (timeUnit == \"week\") {\n\t\t\tif (this.getPrivate(\"baseInterval\")?.timeUnit != \"week\") {\n\t\t\t\tminorGridInterval = { timeUnit: \"day\", count: 1 };\n\t\t\t}\n\t\t}\n\t\treturn minorGridInterval;\n\t}\n\n\tprotected _prepareAxisItems() {\n\t\tconst min = this.getPrivate(\"min\");\n\t\tconst max = this.getPrivate(\"max\");\n\n\t\tif ($type.isNumber(min) && $type.isNumber(max)) {\n\t\t\tconst root = this._root;\n\t\t\tconst selectionMin = Math.round(this.getPrivate(\"selectionMin\")! as number);\n\t\t\tconst selectionMax = Math.round(this.getPrivate(\"selectionMax\")! as number);\n\t\t\tconst renderer = this.get(\"renderer\");\n\t\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\n\t\t\tlet value = selectionMin;\n\t\t\tlet i = 0;\n\n\t\t\tconst intervals = this.get(\"gridIntervals\")!;\n\t\t\tlet gridInterval = $time.chooseInterval(0, selectionMax - selectionMin, renderer.gridCount(), intervals);\n\n\t\t\tif ($time.getIntervalDuration(gridInterval) < this.baseDuration()) {\n\t\t\t\tgridInterval = { ...baseInterval };\n\t\t\t}\n\n\t\t\tconst intervalDuration = $time.getIntervalDuration(gridInterval);\n\t\t\tthis._intervalDuration = intervalDuration;\n\n\t\t\tconst nextGridUnit = $time.getNextUnit(gridInterval.timeUnit);\n\t\t\tconst utc = root.utc;\n\t\t\tconst timezone = root.timezone;\n\n\t\t\t//value = $time.round(new Date(selectionMin - intervalDuration), gridInterval.timeUnit, gridInterval.count, firstDay, utc, new Date(min), timezone).getTime();\n\t\t\tvalue = $time.roun(selectionMin - intervalDuration, gridInterval.timeUnit, gridInterval.count, root, min);\n\t\t\tlet previousValue = value - intervalDuration;\n\t\t\tlet format: string | Intl.DateTimeFormatOptions;\n\t\t\tconst formats = this.get(\"dateFormats\")!;\n\n\t\t\tthis.setPrivateRaw(\"gridInterval\", gridInterval);\n\n\t\t\tconst minorLabelsEnabled = renderer.get(\"minorLabelsEnabled\");\n\t\t\tconst minorGridEnabled = renderer.get(\"minorGridEnabled\", minorLabelsEnabled);\n\n\t\t\tlet minorGridInterval: ITimeInterval | undefined;\n\t\t\tlet minorDuration = 0;\n\n\t\t\tif (minorGridEnabled) {\n\t\t\t\tminorGridInterval = this._getMinorInterval(gridInterval);\n\t\t\t\tminorDuration = $time.getIntervalDuration(minorGridInterval);\n\t\t\t}\n\n\t\t\tlet m = 0;\n\t\t\twhile (value < selectionMax + intervalDuration) {\n\t\t\t\tlet dataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\tif (this.dataItems.length < i + 1) {\n\t\t\t\t\tdataItem = new DataItem(this, undefined, {});\n\t\t\t\t\tthis._dataItems.push(dataItem);\n\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdataItem = this.dataItems[i];\n\t\t\t\t}\n\n\t\t\t\tthis._createAssets(dataItem, []);\n\n\t\t\t\tthis._toggleDataItem(dataItem, true);\n\n\t\t\t\tdataItem.setRaw(\"value\", value);\n\t\t\t\tdataItem.setRaw(\"labelEndValue\", undefined);\n\n\t\t\t\tlet endValue = value + $time.getDuration(gridInterval.timeUnit, gridInterval.count * this._getM(gridInterval.timeUnit));\n\t\t\t\t//endValue = $time.round(new Date(endValue), gridInterval.timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\tendValue = $time.roun(endValue, gridInterval.timeUnit, 1, root);\n\n\t\t\t\tdataItem.setRaw(\"endValue\", endValue);\n\n\t\t\t\tlet date = new Date(value);\n\n\t\t\t\tformat = formats[gridInterval.timeUnit];\n\t\t\t\tif (nextGridUnit && this.get(\"markUnitChange\") && $type.isNumber(previousValue)) {\n\t\t\t\t\tif (gridInterval.timeUnit != \"year\") {\n\t\t\t\t\t\tif ($time.checkChange(value, previousValue, nextGridUnit, utc, timezone)) {\n\t\t\t\t\t\t\tformat = this.get(\"periodChangeDateFormats\")![gridInterval.timeUnit];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tif (label) {\n\t\t\t\t\tlabel.set(\"text\", root.dateFormatter.format(date, format!));\n\t\t\t\t}\n\n\t\t\t\tlet count = gridInterval.count;\n\t\t\t\t// so that labels of week would always be at the beginning of the grid\n\t\t\t\tif (gridInterval.timeUnit == \"week\") {\n\t\t\t\t\tdataItem.setRaw(\"labelEndValue\", value);\n\t\t\t\t}\n\n\t\t\t\tif (minorGridEnabled) {\n\t\t\t\t\tcount = 1;\n\t\t\t\t\tlet timeUnit = gridInterval.timeUnit;\n\t\t\t\t\tif (timeUnit == \"week\") {\n\t\t\t\t\t\ttimeUnit = \"day\";\n\t\t\t\t\t}\n\n\t\t\t\t\tlet labelEndValue = value + $time.getDuration(timeUnit, this._getM(timeUnit));\n\t\t\t\t\t//labelEndValue = $time.round(new Date(labelEndValue), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\tlabelEndValue = $time.roun(labelEndValue, timeUnit, 1, root);\n\t\t\t\t\tdataItem.setRaw(\"labelEndValue\", labelEndValue);\n\t\t\t\t}\n\n\t\t\t\tthis._prepareDataItem(dataItem, count);\n\n\t\t\t\tpreviousValue = value;\n\t\t\t\tvalue = endValue;\n\n\t\t\t\t// min grid\n\t\t\t\tif (minorGridInterval) {\n\t\t\t\t\tconst minorTimeUnit = minorGridInterval.timeUnit;\n\t\t\t\t\tconst minorCount = minorGridInterval.count;\n\t\t\t\t\tconst mmm = this._getM(minorTimeUnit);\n\n\t\t\t\t\t//let minorValue = $time.round(new Date(previousValue + minorDuration * this._getM(minorGridInterval.timeUnit)), minorGridInterval.timeUnit, minorGridInterval.count, firstDay, utc, new Date(previousValue), timezone).getTime();\n\t\t\t\t\tlet minorValue = $time.roun(previousValue + minorDuration * mmm, minorTimeUnit, minorCount, root, previousValue);\n\n\t\t\t\t\tlet previousMinorValue: number | undefined;\n\t\t\t\t\tlet minorFormats = this.get(\"minorDateFormats\", this.get(\"dateFormats\"))!;\n\n\t\t\t\t\twhile (minorValue < value - 0.01 * minorDuration) {\n\t\t\t\t\t\tlet minorDataItem: DataItem<this[\"_dataItemSettings\"]>;\n\t\t\t\t\t\tif (this.minorDataItems.length < m + 1) {\n\t\t\t\t\t\t\tminorDataItem = new DataItem(this, undefined, {});\n\t\t\t\t\t\t\tthis.minorDataItems.push(minorDataItem);\n\t\t\t\t\t\t\tthis.processDataItem(minorDataItem);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tminorDataItem = this.minorDataItems[m];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._createAssets(minorDataItem, [\"minor\"], true);\n\n\t\t\t\t\t\tthis._toggleDataItem(minorDataItem, true);\n\n\t\t\t\t\t\tminorDataItem.setRaw(\"value\", minorValue);\n\n\t\t\t\t\t\tlet minorEndValue = minorValue + $time.getDuration(minorTimeUnit, minorCount * mmm);\n\t\t\t\t\t\t//minorEndValue = $time.round(new Date(minorEndValue), minorGridInterval.timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\t\tminorEndValue = $time.roun(minorEndValue, minorTimeUnit, 1, root);\n\n\t\t\t\t\t\tminorDataItem.setRaw(\"endValue\", minorEndValue);\n\n\t\t\t\t\t\tlet date = new Date(minorValue);\n\n\t\t\t\t\t\tformat = minorFormats[minorTimeUnit];\n\n\t\t\t\t\t\tconst minorLabel = minorDataItem.get(\"label\");\n\n\t\t\t\t\t\tif (minorLabel) {\n\t\t\t\t\t\t\tif (minorLabelsEnabled) {\n\t\t\t\t\t\t\t\tminorLabel.set(\"text\", root.dateFormatter.format(date, format!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tminorLabel.setPrivate(\"visible\", false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._prepareDataItem(minorDataItem, 1);\n\n\t\t\t\t\t\tif (minorValue == previousMinorValue) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpreviousMinorValue = minorValue;\n\t\t\t\t\t\tminorValue = minorEndValue;\n\t\t\t\t\t\tm++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value == previousValue) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ti++;\n\t\t\t}\n\n\t\t\tfor (let j = i; j < this.dataItems.length; j++) {\n\t\t\t\tthis._toggleDataItem(this.dataItems[j], false);\n\t\t\t}\n\n\t\t\tfor (let j = m; j < this.minorDataItems.length; j++) {\n\t\t\t\tthis._toggleDataItem(this.minorDataItems[j], false);\n\t\t\t}\n\n\t\t\t$array.each(this.series, (series) => {\n\t\t\t\tif (series.inited) {\n\t\t\t\t\tseries._markDirtyAxes();\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\tthis._updateGhost();\n\t}\n\n\tprotected _updateFinals(start: number, end: number) {\n\t\tthis.setPrivateRaw(\"selectionMinFinal\", this.positionToValue(start));\n\t\tthis.setPrivateRaw(\"selectionMaxFinal\", this.positionToValue(end));\n\t}\n\n\tprotected _getDelta() {\n\t\tthis._deltaMinMax = this.baseDuration() / 2;\n\t}\n\n\tprotected _fixMin(min: number) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t//let startTime = $time.round(new Date(min), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n\t\tlet startTime = $time.roun(min, timeUnit, baseInterval.count, this._root);\n\n\t\tlet endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit))\n\t\t//endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\tendTime = $time.roun(endTime, timeUnit, 1, this._root);\n\t\treturn startTime + (endTime - startTime) * this.get(\"startLocation\", 0);\n\t}\n\n\tprotected _fixMax(max: number) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t//let startTime = $time.round(new Date(max), timeUnit, baseInterval.count, firstDay, utc, undefined, timezone).getTime();\n\t\tlet startTime = $time.roun(max, timeUnit, baseInterval.count, this._root);\n\t\tlet endTime = startTime + $time.getDuration(timeUnit, baseInterval.count * this._getM(timeUnit))\n\t\t//endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\tendTime = $time.roun(endTime, timeUnit, 1, this._root);\n\n\t\treturn startTime + (endTime - startTime) * this.get(\"endLocation\", 1);\n\t}\n\n\tprotected _updateDates(_date: number, _series: XYSeries) {\n\n\t}\n\n\t/**\n\t * Returns a duration of currently active `baseInterval` in milliseconds.\n\t * \n\t * @return Duration\n\t */\n\tpublic baseDuration(): number {\n\t\treturn this._baseDuration;\n\t\t//return $time.getIntervalDuration(this.getPrivate(\"baseInterval\"));\n\t}\n\n\t/**\n\t * Returns a duration of user-defined `baseInterval` in milliseconds.\n\t *\n\t * @return Duration\n\t */\n\tpublic baseMainDuration(): number {\n\t\treturn $time.getIntervalDuration(this.get(\"baseInterval\"));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic processSeriesDataItem(dataItem: DataItem<IXYSeriesDataItem>, fields: Array<string>) {\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\n\t\tif (!dataItem.open) {\n\t\t\tdataItem.open = {};\n\t\t}\n\t\tif (!dataItem.close) {\n\t\t\tdataItem.close = {};\n\t\t}\n\n\t\t$array.each(fields, (field) => {\n\t\t\tlet value = dataItem.get(field as any);\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tlet startTime = dataItem.open![field];\n\t\t\t\tlet endTime = dataItem.close![field];\n\t\t\t\t// this is done to save cpu, as rounding is quite expensive, especially with timezone set. \n\t\t\t\t// if value is between prev start and end, it means it didn't change, all is fine.\n\t\t\t\tif (value >= startTime && value <= endTime) {\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t\t\t\tconst count = baseInterval.count;\n\t\t\t\t\t//startTime = $time.round(new Date(value), timeUnit, count, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\tstartTime = $time.roun(value, timeUnit, count, this._root);\n\t\t\t\t\tendTime = startTime + $time.getDuration(timeUnit, count * this._getM(timeUnit));\n\t\t\t\t\t//endTime = $time.round(new Date(endTime), timeUnit, 1, firstDay, utc, undefined, timezone).getTime();\n\t\t\t\t\tendTime = $time.roun(endTime, timeUnit, 1, this._root);\n\n\t\t\t\t\tdataItem.open![field] = startTime;\n\t\t\t\t\tdataItem.close![field] = endTime;\n\t\t\t\t}\n\n\t\t\t\tthis._updateDates(startTime, dataItem.component as XYSeries);\n\t\t\t}\n\t\t})\n\t}\n\n\tprotected _handleSizeDirty() {\n\t\t// void \n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\n\t\tlet openValue;\n\t\tlet closeValue;\n\n\t\tif (dataItem.open && dataItem.close) {\n\t\t\topenValue = dataItem.open[field];\n\t\t\tcloseValue = dataItem.close[field];\n\t\t}\n\t\telse {\n\t\t\topenValue = dataItem.get(field as any)\n\t\t\tcloseValue = openValue;\n\t\t}\n\n\t\tlet value = openValue + (closeValue - openValue) * cellLocation;\n\n\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateX(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionX(dataItem, field, cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemPositionY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\tlet openValue;\n\t\tlet closeValue;\n\n\t\tif (dataItem.open && dataItem.close) {\n\t\t\topenValue = dataItem.open[field];\n\t\t\tcloseValue = dataItem.close[field];\n\t\t}\n\t\telse {\n\t\t\topenValue = dataItem.get(field as any)\n\t\t\tcloseValue = openValue;\n\t\t}\n\n\t\tlet value = openValue + (closeValue - openValue) * cellLocation;\n\n\t\tvalue = this._baseValue + (value - this._baseValue) * axisLocation;\n\t\treturn this.valueToPosition(value);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic getDataItemCoordinateY(dataItem: DataItem<IXYSeriesDataItem>, field: string, cellLocation: number, axisLocation: number): number {\n\t\treturn this._settings.renderer.positionToCoordinate(this.getDataItemPositionY(dataItem, field, cellLocation, axisLocation));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic roundAxisPosition(position: number, location: number): number {\n\t\tlet value = this.positionToValue(position);\n\t\tvalue = value - (location - 0.5) * this.baseDuration();\n\n\t\tlet baseInterval = this.getPrivate(\"baseInterval\");\n\t\tif (!$type.isNaN(value)) {\n\t\t\tconst firstDay = this._root.locale.firstDayOfWeek;\n\t\t\tconst timeUnit = baseInterval.timeUnit;\n\t\t\tconst utc = this._root.utc;\n\t\t\tconst timezone = this._root.timezone;\n\t\t\tconst count = baseInterval.count;\n\n\t\t\t//value = $time.round(new Date(value), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n\t\t\tvalue = $time.roun(value, timeUnit, count, this._root, this.getPrivate(\"min\", 0));\n\n\t\t\tlet duration = $time.getDateIntervalDuration(baseInterval, new Date(value), firstDay, utc, timezone);\n\t\t\tif (timezone) {\n\t\t\t\t//value = $time.round(new Date(value + this.baseDuration() * 0.05), timeUnit, count, firstDay, utc, new Date(this.getPrivate(\"min\", 0)), timezone).getTime();\n\t\t\t\tvalue = $time.roun(value + this.baseDuration() * 0.05, timeUnit, count, this._root, this.getPrivate(\"min\", 0));\n\t\t\t\tduration = $time.getDateIntervalDuration(baseInterval, new Date(value + duration * location), firstDay, utc, timezone);\n\t\t\t}\n\n\t\t\treturn this.valueToPosition(value + duration * location);\n\t\t}\n\t\treturn NaN;\n\t}\n\n\t/**\n\t * Returns text to be used in an axis tooltip for specific relative position.\n\t *\n\t * NOTE: Unless `adjustPosition` (2nd parameter) is set to `false`, the method\n\t * will adjust position by `tooltipIntervalOffset`.\n\t *\n\t * @param  position        Position\n\t * @param  adjustPosition  Adjust position\n\t * @return                 Tooltip text\n\t */\n\tpublic getTooltipText(position: number, adjustPosition?: boolean): string | undefined {\n\t\t//@todo number formatter + tag\n\t\tif (this.getPrivate(\"min\") != null) {\n\t\t\tlet format = this.get(\"tooltipDateFormats\")![this.getPrivate(\"baseInterval\").timeUnit];\n\t\t\tlet value = this.positionToValue(position);\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tlet date = new Date(value);\n\n\t\t\t\tlet baseInterval = this.getPrivate(\"baseInterval\");\n\t\t\t\tlet duration = $time.getDateIntervalDuration(baseInterval, date, this._root.locale.firstDayOfWeek, this._root.utc, this._root.timezone);\n\n\t\t\t\tif (adjustPosition !== false) {\n\t\t\t\t\tdate = new Date(value + this.get(\"tooltipIntervalOffset\", -this.get(\"tooltipLocation\", 0.5)) * duration)\n\t\t\t\t}\n\n\t\t\t\treturn this._root.dateFormatter.format(date, this.get(\"tooltipDateFormat\", format));\n\t\t\t}\n\n\t\t}\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns a data item from series that is closest to the `position`.\n\t *\n\t * @param   series    Series\n\t * @param   position  Relative position\n\t * @return            Data item\n\t */\n\tpublic getSeriesItem(series: XYSeries, position: number, location?: number, snap?: boolean): DataItem<IXYSeriesDataItem> | undefined {\n\t\tlet fieldName = <any>(this.getPrivate(\"name\")! + this.get(\"renderer\").getPrivate(\"letter\")!);\n\t\tlet value = this.positionToValue(position);\n\n\t\tif (location == null) {\n\t\t\tlocation = 0.5;\n\t\t}\n\n\t\tvalue = value - (location - 0.5) * this.baseDuration();\n\n\t\tconst result = $array.getSortedIndex(series.dataItems, (dataItem) => {\n\t\t\tlet diValue = 0;\n\t\t\tif (dataItem.open) {\n\t\t\t\tdiValue = dataItem.open[fieldName];\n\t\t\t}\n\n\t\t\treturn $order.compare(diValue, value);\n\t\t});\n\n\t\tif (snap || series.get(\"snapTooltip\")) {\n\t\t\tlet first = series.dataItems[result.index - 1];\n\t\t\tlet second = series.dataItems[result.index];\n\n\t\t\tif (first && second) {\n\t\t\t\tif (first.open && second.close) {\n\t\t\t\t\tlet open = first.open[fieldName];\n\t\t\t\t\tlet close = second.close[fieldName];\n\n\t\t\t\t\tif (Math.abs(value - open) > Math.abs(value - close)) {\n\t\t\t\t\t\treturn second;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (first) {\n\t\t\t\treturn first;\n\t\t\t}\n\n\t\t\tif (second) {\n\t\t\t\treturn second;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconst dataItem = series.dataItems[result.index - 1];\n\n\t\t\tif (dataItem) {\n\t\t\t\tif (dataItem.open && dataItem.close) {\n\t\t\t\t\tlet open = dataItem.open[fieldName];\n\t\t\t\t\tlet close = dataItem.close[fieldName];\n\n\t\t\t\t\tif (value >= open && value <= close) {\n\t\t\t\t\t\treturn dataItem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic shouldGap(dataItem: DataItem<IXYSeriesDataItem>, nextItem: DataItem<IXYSeriesDataItem>, autoGapCount: number, fieldName: string): boolean {\n\t\tconst value1 = dataItem.get(fieldName as any);\n\t\tconst value2 = nextItem.get(fieldName as any);\n\n\t\tif (value2 - value1 > this.baseDuration() * autoGapCount) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` dates.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start Date\n\t * @param  end       End Date\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToDates(start: Date, end: Date, duration?: number) {\n\t\tthis.zoomToValues(start.getTime(), end.getTime(), duration);\n\t}\n\n\t/**\n\t * Zooms the axis to specific `start` and `end` values.\n\t *\n\t * Optional `duration` specifies duration of zoom animation in milliseconds.\n\t *\n\t * @param  start     Start value\n\t * @param  end       End value\n\t * @param  duration  Duration in milliseconds\n\t */\n\tpublic zoomToValues(start: number, end: number, duration?: number) {\n\t\tconst min = this.getPrivate(\"minFinal\", 0);\n\t\tconst max = this.getPrivate(\"maxFinal\", 0);\n\t\tif (this.getPrivate(\"min\") != null && this.getPrivate(\"max\") != null) {\n\t\t\tif (this.get(\"groupData\")) {\n\t\t\t\tconst futureGroupInterval = this.getGroupInterval(end - start);\n\t\t\t\tconst baseInterval = this.get(\"baseInterval\");\n\n\t\t\t\tlet baseMin = this.getIntervalMin(baseInterval);\n\t\t\t\tlet baseMax = this.getIntervalMax(baseInterval) - 1;\n\t\t\t\tbaseMax = $time.roun(baseMax, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n\t\t\t\tbaseMax += this._getM(futureGroupInterval.timeUnit) * $time.getIntervalDuration(futureGroupInterval);\n\t\t\t\tbaseMax = $time.roun(baseMax, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n\n\t\t\t\tlet futureMin = $time.roun(baseMin, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n\t\t\t\tlet futureMax = $time.roun(baseMax, futureGroupInterval.timeUnit, futureGroupInterval.count, this.root);\n\n\t\t\t\tlet s = (start - futureMin) / (futureMax - futureMin);\n\t\t\t\tlet e = (end - futureMin) / (futureMax - futureMin);\n\n\t\t\t\tthis.zoom(s, e, duration);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.zoom((start - min) / (max - min), (end - min) / (max - min), duration);\n\t\t\t}\n\t\t}\n\t}\n\n\n\t/**\n\t * Returns a `Date` object corresponding to specific position within plot\n\t * area.\n\t *\n\t * @param   position  Pposition\n\t * @return            Date\n\t */\n\tpublic positionToDate(position: number): Date {\n\t\treturn new Date(this.positionToValue(position));\n\t}\n\n\t/**\n\t * Returns a relative position within plot area that corresponds to specific\n\t * date.\n\t *\n\t * @param   date  Date\n\t * @return        Position\n\t */\n\tpublic dateToPosition(date: Date): number {\n\t\treturn this.valueToPosition(date.getTime());\n\t}\n\n\t/**\n\t * Returns relative position between two grid lines of the axis.\n\t *\n\t * @since 5.2.30\n\t * @return Position\n\t */\n\tpublic getCellWidthPosition(): number {\n\t\tlet max = this.getPrivate(\"selectionMax\", this.getPrivate(\"max\"));\n\t\tlet min = this.getPrivate(\"selectionMin\", this.getPrivate(\"min\"));\n\n\t\tif ($type.isNumber(max) && $type.isNumber(min)) {\n\t\t\treturn this._intervalDuration / (max - min);\n\t\t}\n\t\treturn 0.05;\n\t}\n\n\tpublic nextPosition(count?:number){\n\t\tif(count == null){\n\t\t\tcount = 1;\n\t\t}\n\n\t\tlet dtime = this.get(\"tooltipLocation\", 0.5) * this.baseDuration();\t\t\n\t\tif(this.get(\"renderer\").getPrivate(\"letter\") == \"Y\"){\n\t\t\tcount *= -1;\n\t\t}\n\n\t\tlet tooltipValue = this.positionToValue(this.getPrivate(\"tooltipPosition\", 0));\n\n\t\tconst baseInterval = this.getPrivate(\"baseInterval\");\n\t\tlet time = this._nextTime(tooltipValue, count, baseInterval);\n\n\t\tlet selectionMin = this.getPrivate(\"selectionMin\", 0);\n\t\tlet selectionMax = this.getPrivate(\"selectionMax\", 0);\n\n\t\tlet min = $time.roun(selectionMin, baseInterval.timeUnit, baseInterval.count, this._root);\n\t\tlet max = $time.roun(selectionMax, baseInterval.timeUnit, baseInterval.count, this._root);\n\n\t\ttime += dtime;\t\t\n\t\ttime = $math.fitToRange(time, min + dtime, max - dtime);\n\n\t\treturn this.toGlobalPosition(this.valueToPosition(time));\n\t}\t\n\n\tprotected _nextTime(time:number, count:number, baseInterval:ITimeInterval){\n\t\treturn $time.roun(time + count * this.baseDuration(), baseInterval.timeUnit, baseInterval.count, this._root);\n\t}\n}\n"],"names":["XYCursor","Container","constructor","Object","defineProperty","this","children","push","Grid","new","_root","themeTags","Graphics","layer","x","y","_afterNew","_settings","$utils","super","setAll","p100","height","isMeasured","position","states","create","visible","opacity","_drawLines","setPrivateRaw","_disposers","setTimeout","setPrivate","lineX","events","on","_handleXLine","lineY","_handleYLine","_handleLineFocus","_handleLineBlur","document","ev","_handleLineMove","ctrlKey","_setUpTouch","chart","plotContainer","_display","cancelTouch","get","width","key","dir","axis","xAxes","length","focused","getIndex","yAxes","m","step","inversed","set","nextPosition","_alwaysShow","positionX","getPrivate","positionY","alwaysShow","isFocus","undefined","_prepareChildren","isDirty","_tooltipX","xAxis","tooltip","_updateXLine","_tooltipY","yAxis","_updateYLine","_handleSyncWith","syncWith","otherCharts","$array","cursor","_otherCharts","_updateChildren","hide","_movePoint","toGlobal","_getPoint","handleMove","$math","toLocal","_toX","animate","to","duration","easing","_toY","display","moveTo","lineTo","updateCursor","_setChart","event","originalEvent","_handleMove","_handleCursorDown","_handleCursorUp","native","isHidden","$object","_downPoints","Math","hypot","_lastPoint2","point","parent","moveValue","selection","_inPlot","inPlot","button","rootPoint","local","_downPoint","show","type","isEnabled","dispatch","target","_getPosition","behavior","charAt","downPoint","moveThreshold","abs","lastPoint","_lastPoint","round","skipEvent","xyPos","snapToSeries","userPositionX","$type","userPositionY","xy","each","_handleCursorPosition","handleCursorShow","_updateLines","arrangeTooltips","_updateSelection","w","h","_onHide","handleCursorHide","series","_onShow","_dispose","dispose","classNames","concat","className","DateAxis","ValueAxis","_setBaseInterval","interval","_baseDuration","$time","_fixZoomFactor","maxZoomFactor","Infinity","baseMainDuration","_groupData","min","max","groupInterval","setRaw","_handleRangeChange","_dataGrouped","_groupSeriesData","baseInterval","mainDataSetId","timeUnit","count","setDataSet","resetGrouping","markDirtyExtremes","_seriesDataGrouped","intervals","baseDuration","groupIntervals","_dataSets","fields","baseAxis","_valueYFields","_valueXFields","dataItems","_mainDataItems","groupCallback","groupOriginals","newDataItem","previousTime","dataSetId","sum","groupFieldValues","workingFields","field","firstTime","prevNewDataItem","intervalDuration","dataItem","dataContext","time","roundedTime","DataItem","_makeDataItem","value","groupKey","currentValue","average","_dataSetId","markDirtySize","_seriesAdded","once","_clearDirty","_groupingCalculated","getGroupInterval","assign","getIntervalMax","_intervalMax","getIntervalMin","_intervalMin","selectionMin","selectionMax","current","modifiedDifference","ceil","newId","fieldName","startIndex","$order","index","endIndex","endIndex2","firstDataItem","lastDataItem","lastDate","firstDate","outOfSelection","_adjustStartIndex","root","_markDirtyPrivateKey","_adjustMinMax","gridCount","_strictMode","_intervalDuration","_saveMinMax","id","_getM","_getMinorInterval","minorGridInterval","_a","_prepareAxisItems","renderer","i","gridInterval","nextGridUnit","utc","timezone","format","previousValue","formats","minorLabelsEnabled","minorGridEnabled","minorDuration","_dataItems","processDataItem","_createAssets","_toggleDataItem","endValue","date","Date","label","dateFormatter","labelEndValue","_prepareDataItem","minorTimeUnit","minorCount","mmm","previousMinorValue","minorValue","minorFormats","minorDataItem","minorDataItems","minorEndValue","minorLabel","j","inited","_markDirtyAxes","_updateGhost","_updateFinals","start","end","positionToValue","_getDelta","_deltaMinMax","_fixMin","startTime","endTime","_fixMax","_updateDates","_date","_series","processSeriesDataItem","open","close","component","_handleSizeDirty","getDataItemPositionX","cellLocation","axisLocation","openValue","closeValue","_baseValue","valueToPosition","getDataItemCoordinateX","positionToCoordinate","getDataItemPositionY","getDataItemCoordinateY","roundAxisPosition","location","firstDay","locale","firstDayOfWeek","NaN","getTooltipText","adjustPosition","getSeriesItem","snap","result","diValue","first","second","shouldGap","nextItem","autoGapCount","value1","zoomToDates","zoomToValues","getTime","futureGroupInterval","baseMin","baseMax","futureMin","futureMax","s","e","zoom","positionToDate","dateToPosition","getCellWidthPosition","dtime","tooltipValue","_nextTime","toGlobalPosition"],"sourceRoot":""}