{"version":3,"file":"static/js/6697.f82a8e1f.chunk.js","mappings":"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","sources":["components/TreeChart.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport { treeCompensationLayer, treeCuttingLayer } from '../layers';\r\nimport { view } from '../Scene';\r\nimport FeatureFilter from '@arcgis/core/layers/support/FeatureFilter';\r\nimport Query from '@arcgis/core/rest/support/Query';\r\nimport * as am5 from '@amcharts/amcharts5';\r\nimport * as am5percent from '@amcharts/amcharts5/percent';\r\nimport am5themes_Animated from '@amcharts/amcharts5/themes/Animated';\r\nimport am5themes_Responsive from '@amcharts/amcharts5/themes/Responsive';\r\nimport {\r\n  generateTreeCuttingData,\r\n  generateTreesNumber,\r\n  statusTreeCuttingChart,\r\n  statusTreeCompensationChart,\r\n  thousands_separators,\r\n  generateTreeCompensationData,\r\n} from '../Query';\r\nimport '../App.css';\r\nimport { primaryLabelColor, valueLabelColor } from '../StatusUniqueValues';\r\nimport '@esri/calcite-components/dist/components/calcite-label';\r\nimport { CalciteLabel } from '@esri/calcite-components-react';\r\n\r\n// Dispose function\r\nfunction maybeDisposeRoot(divId: any) {\r\n  am5.array.each(am5.registry.rootElements, function (root) {\r\n    if (root.dom.id === divId) {\r\n      root.dispose();\r\n    }\r\n  });\r\n}\r\n\r\nconst TreeChart = (props: any) => {\r\n  // Tree cutting\r\n  const pieSeriesRef = useRef<unknown | any | undefined>({});\r\n  const legendRef = useRef<unknown | any | undefined>({});\r\n  const chartRef = useRef<unknown | any | undefined>({});\r\n  const [treeCuttingData, setTreeCuttingData] = useState([\r\n    {\r\n      category: String,\r\n      value: Number,\r\n      sliceSettings: {\r\n        fill: am5.color('#00c5ff'),\r\n      },\r\n    },\r\n  ]);\r\n  const chartID_cuting = 'pie-cut';\r\n\r\n  // Tree compensation\r\n  const pieSeriesRef_compen = useRef<unknown | any | undefined>({});\r\n  const legendRef_compen = useRef<unknown | any | undefined>({});\r\n  const chartRef_compen = useRef<unknown | any | undefined>({});\r\n  const [treeCompensationData, setTreeCompensationData] = useState([\r\n    {\r\n      category: String,\r\n      value: Number,\r\n      sliceSettings: {\r\n        fill: am5.color('#00c5ff'),\r\n      },\r\n    },\r\n  ]);\r\n  const chartID_compen = 'pie-compen';\r\n\r\n  const [treesNumber, setTreesNumber] = useState([]);\r\n\r\n  const defaultExpression = '1=1';\r\n  const queryExpression = \"CP = '\" + props.contractp + \"'\";\r\n  if (props.contractp === 'All') {\r\n    treeCuttingLayer.definitionExpression = defaultExpression;\r\n    treeCompensationLayer.definitionExpression = defaultExpression;\r\n  } else {\r\n    treeCuttingLayer.definitionExpression = queryExpression;\r\n    treeCompensationLayer.definitionExpression = queryExpression;\r\n  }\r\n\r\n  // chart and box properties\r\n  const legendBoxWidth = 220;\r\n  const legendY = am5.percent(53);\r\n\r\n  useEffect(() => {\r\n    generateTreeCuttingData().then((result: any) => {\r\n      setTreeCuttingData(result);\r\n    });\r\n\r\n    generateTreeCompensationData().then((result: any) => {\r\n      setTreeCompensationData(result);\r\n    });\r\n\r\n    generateTreesNumber().then((response: any) => {\r\n      setTreesNumber(response);\r\n    });\r\n  }, [props.contractp]);\r\n\r\n  useEffect(() => {\r\n    maybeDisposeRoot(chartID_cuting);\r\n\r\n    var root = am5.Root.new(chartID_cuting);\r\n    root.container.children.clear();\r\n    root._logo?.dispose();\r\n\r\n    // Set themesf\r\n    root.setThemes([am5themes_Animated.new(root), am5themes_Responsive.new(root)]);\r\n\r\n    // Create chart\r\n    var chart = root.container.children.push(\r\n      am5percent.PieChart.new(root, {\r\n        layout: root.verticalLayout,\r\n      }),\r\n    );\r\n\r\n    // Add image in the middle\r\n    // chart.children.push(\r\n    //   am5.Picture.new(root, {\r\n    //     width: 50,\r\n    //     height: 50,\r\n    //     x: am5.percent(50),\r\n    //     y: am5.percent(50),\r\n    //     centerX: am5.percent(100),\r\n    //     centerY: am5.percent(55),\r\n    //     src: 'https://EijiGorilla.github.io/Symbols/Tree_Cutting_Logo.svg',\r\n    //   }),\r\n    // );\r\n\r\n    chartRef.current = chart;\r\n\r\n    // Create series\r\n    var pieSeries = chart.series.push(\r\n      am5percent.PieSeries.new(root, {\r\n        name: 'Series',\r\n        categoryField: 'category',\r\n        valueField: 'value',\r\n        //legendLabelText: \"[{fill}]{category}[/]\",\r\n        legendValueText: \"{valuePercentTotal.formatNumber('#.')}% ({value})\",\r\n        radius: am5.percent(45), // outer radius\r\n        innerRadius: am5.percent(28),\r\n        scale: 1.8,\r\n      }),\r\n    );\r\n    pieSeriesRef.current = pieSeries;\r\n    chart.series.push(pieSeries);\r\n\r\n    // values inside a donut\r\n    let inner_label = pieSeries.children.push(\r\n      am5.Label.new(root, {\r\n        text: '[#ffffff]{valueSum}[/]\\n[fontSize: 5px; #d3d3d3; verticalAlign: super]TREES[/]',\r\n        fontSize: '1rem',\r\n        centerX: am5.percent(50),\r\n        centerY: am5.percent(40),\r\n        populateText: true,\r\n        oversizedBehavior: 'fit',\r\n        textAlign: 'center',\r\n      }),\r\n    );\r\n\r\n    pieSeries.onPrivate('width', (width: any) => {\r\n      inner_label.set('maxWidth', width * 0.7);\r\n    });\r\n\r\n    // Set slice opacity and stroke color\r\n    pieSeries.slices.template.setAll({\r\n      toggleKey: 'none',\r\n      fillOpacity: 0.9,\r\n      stroke: am5.color('#ffffff'),\r\n      strokeWidth: 0.5,\r\n      strokeOpacity: 1,\r\n      templateField: 'sliceSettings',\r\n    });\r\n\r\n    // Disabling labels and ticksll\r\n    pieSeries.labels.template.set('visible', false);\r\n    pieSeries.ticks.template.set('visible', false);\r\n\r\n    // EventDispatcher is disposed at SpriteEventDispatcher...\r\n    // It looks like this error results from clicking events\r\n    pieSeries.slices.template.events.on('click', (ev) => {\r\n      const selected: any = ev.target.dataItem?.dataContext;\r\n      const categorySelected: string = selected.category;\r\n      const find = statusTreeCuttingChart.find((emp: any) => emp.category === categorySelected);\r\n      const statusSelect = find?.value;\r\n\r\n      var highlightSelect: any;\r\n\r\n      var query = treeCuttingLayer.createQuery();\r\n\r\n      view.when(function () {\r\n        view.whenLayerView(treeCuttingLayer).then((layerView): any => {\r\n          //chartLayerView = layerView;\r\n\r\n          treeCuttingLayer.queryFeatures(query).then((results: any) => {\r\n            const RESULT_LENGTH = results.features;\r\n            const ROW_N = RESULT_LENGTH.length;\r\n\r\n            let objID = [];\r\n            for (var i = 0; i < ROW_N; i++) {\r\n              var obj = results.features[i].attributes.OBJECTID;\r\n              objID.push(obj);\r\n            }\r\n\r\n            var queryExt = new Query({\r\n              objectIds: objID,\r\n            });\r\n\r\n            treeCuttingLayer.queryExtent(queryExt).then((result: any) => {\r\n              if (result.extent) {\r\n                view.goTo(result.extent);\r\n              }\r\n            });\r\n\r\n            if (highlightSelect) {\r\n              highlightSelect.remove();\r\n            }\r\n            highlightSelect = layerView.highlight(objID);\r\n\r\n            view.on('click', function () {\r\n              layerView.filter = new FeatureFilter({\r\n                where: undefined,\r\n              });\r\n              highlightSelect.remove();\r\n            });\r\n          }); // End of queryFeatures\r\n\r\n          layerView.filter = new FeatureFilter({\r\n            where: 'Status = ' + statusSelect,\r\n          });\r\n\r\n          // For initial state, we need to add this\r\n          view.on('click', () => {\r\n            layerView.filter = new FeatureFilter({\r\n              where: undefined,\r\n            });\r\n            highlightSelect !== undefined ? highlightSelect.remove() : console.log('');\r\n          });\r\n        }); // End of view.whenLayerView\r\n      }); // End of view.whenv\r\n    });\r\n\r\n    pieSeries.data.setAll(treeCuttingData);\r\n\r\n    // Legend\r\n    // https://www.amcharts.com/docs/v5/charts/percent-charts/legend-percent-series/\r\n    var legend = chart.children.push(\r\n      am5.Legend.new(root, {\r\n        centerX: am5.percent(50),\r\n        x: am5.percent(50),\r\n      }),\r\n    );\r\n    legendRef.current = legend;\r\n    legend.data.setAll(pieSeries.dataItems);\r\n\r\n    // Change the size of legend markers\r\n    legend.markers.template.setAll({\r\n      width: 18,\r\n      height: 18,\r\n    });\r\n\r\n    // Change the marker shape\r\n    legend.markerRectangles.template.setAll({\r\n      cornerRadiusTL: 10,\r\n      cornerRadiusTR: 10,\r\n      cornerRadiusBL: 10,\r\n      cornerRadiusBR: 10,\r\n    });\r\n\r\n    // Responsive legend\r\n    chart.onPrivate('width', function (width: any) {\r\n      const boxWidth = legendBoxWidth; //props.style.width;\r\n      var availableSpace = Math.max(width - chart.height() - boxWidth, boxWidth);\r\n      //var availableSpace = (boxWidth - valueLabelsWidth) * 0.7\r\n      legend.labels.template.setAll({\r\n        width: availableSpace,\r\n        maxWidth: availableSpace,\r\n      });\r\n    });\r\n\r\n    // To align legend items: valueLabels right, labels to left\r\n    // 1. fix width of valueLabels\r\n    // 2. dynamically change width of labels by screen size\r\n\r\n    // Change legend labelling properties\r\n    // To have responsive font size, do not set font size\r\n    legend.labels.template.setAll({\r\n      oversizedBehavior: 'truncate',\r\n      fill: am5.color('#ffffff'),\r\n      //textDecoration: \"underline\"\r\n      //width: am5.percent(200)\r\n      //fontWeight: \"300\"\r\n    });\r\n\r\n    legend.valueLabels.template.setAll({\r\n      textAlign: 'right',\r\n      //width: valueLabelsWidth,\r\n      fill: am5.color('#ffffff'),\r\n      //fontSize: LEGEND_FONT_SIZE,\r\n    });\r\n\r\n    legend.itemContainers.template.setAll({\r\n      // set space between legend items\r\n      paddingTop: 1.1,\r\n      paddingBottom: 2,\r\n    });\r\n\r\n    pieSeries.appear(1000, 100);\r\n\r\n    return () => {\r\n      root.dispose();\r\n    };\r\n  }, [chartID_cuting, treeCuttingData]);\r\n\r\n  useEffect(() => {\r\n    pieSeriesRef.current?.data.setAll(treeCuttingData);\r\n    legendRef.current?.data.setAll(pieSeriesRef.current.dataItems);\r\n  });\r\n\r\n  useEffect(() => {\r\n    maybeDisposeRoot(chartID_compen);\r\n\r\n    var root = am5.Root.new(chartID_compen);\r\n    root.container.children.clear();\r\n    root._logo?.dispose();\r\n\r\n    // Set themesf\r\n    root.setThemes([am5themes_Animated.new(root), am5themes_Responsive.new(root)]);\r\n\r\n    // Create chart\r\n    var chart = root.container.children.push(\r\n      am5percent.PieChart.new(root, {\r\n        layout: root.verticalLayout,\r\n      }),\r\n    );\r\n    chartRef_compen.current = chart;\r\n\r\n    // Create series\r\n    var pieSeries = chart.series.push(\r\n      am5percent.PieSeries.new(root, {\r\n        name: 'Series',\r\n        categoryField: 'category',\r\n        valueField: 'value',\r\n        //legendLabelText: \"[{fill}]{category}[/]\",\r\n        legendValueText: \"{valuePercentTotal.formatNumber('#.')}% ({value})\",\r\n        radius: am5.percent(45), // outer radius\r\n        innerRadius: am5.percent(28),\r\n        scale: 1.8,\r\n      }),\r\n    );\r\n    pieSeriesRef_compen.current = pieSeries;\r\n    chart.series.push(pieSeries);\r\n\r\n    // values inside a donut\r\n    let inner_label = pieSeries.children.push(\r\n      am5.Label.new(root, {\r\n        text: '[#ffffff]{valueSum}[/]\\n[fontSize: 5px; #d3d3d3; verticalAlign: super]TREES[/]',\r\n        fontSize: '1rem',\r\n        centerX: am5.percent(50),\r\n        centerY: am5.percent(40),\r\n        populateText: true,\r\n        oversizedBehavior: 'fit',\r\n        textAlign: 'center',\r\n      }),\r\n    );\r\n\r\n    pieSeries.onPrivate('width', (width: any) => {\r\n      inner_label.set('maxWidth', width * 0.7);\r\n    });\r\n\r\n    // Set slice opacity and stroke color\r\n    pieSeries.slices.template.setAll({\r\n      toggleKey: 'none',\r\n      fillOpacity: 0.9,\r\n      stroke: am5.color('#ffffff'),\r\n      strokeWidth: 0.5,\r\n      strokeOpacity: 1,\r\n      templateField: 'sliceSettings',\r\n    });\r\n\r\n    // Disabling labels and ticksll\r\n    pieSeries.labels.template.set('visible', false);\r\n    pieSeries.ticks.template.set('visible', false);\r\n\r\n    // EventDispatcher is disposed at SpriteEventDispatcher...\r\n    // It looks like this error results from clicking events\r\n    pieSeries.slices.template.events.on('click', (ev) => {\r\n      const selected: any = ev.target.dataItem?.dataContext;\r\n      const categorySelected: string = selected.category;\r\n      const find = statusTreeCompensationChart.find(\r\n        (emp: any) => emp.category === categorySelected,\r\n      );\r\n      const statusSelect = find?.value;\r\n\r\n      var highlightSelect: any;\r\n\r\n      var query = treeCompensationLayer.createQuery();\r\n\r\n      view.when(function () {\r\n        view.whenLayerView(treeCompensationLayer).then((layerView): any => {\r\n          //chartLayerView = layerView;\r\n\r\n          treeCompensationLayer.queryFeatures(query).then((results: any) => {\r\n            const RESULT_LENGTH = results.features;\r\n            const ROW_N = RESULT_LENGTH.length;\r\n\r\n            let objID = [];\r\n            for (var i = 0; i < ROW_N; i++) {\r\n              var obj = results.features[i].attributes.OBJECTID;\r\n              objID.push(obj);\r\n            }\r\n\r\n            var queryExt = new Query({\r\n              objectIds: objID,\r\n            });\r\n\r\n            treeCompensationLayer.queryExtent(queryExt).then((result: any) => {\r\n              if (result.extent) {\r\n                view.goTo(result.extent);\r\n              }\r\n            });\r\n\r\n            if (highlightSelect) {\r\n              highlightSelect.remove();\r\n            }\r\n            highlightSelect = layerView.highlight(objID);\r\n\r\n            view.on('click', function () {\r\n              layerView.filter = new FeatureFilter({\r\n                where: undefined,\r\n              });\r\n              highlightSelect.remove();\r\n            });\r\n          }); // End of queryFeatures\r\n\r\n          layerView.filter = new FeatureFilter({\r\n            where: 'Compensation = ' + statusSelect,\r\n          });\r\n\r\n          // For initial state, we need to add this\r\n          view.on('click', () => {\r\n            layerView.filter = new FeatureFilter({\r\n              where: undefined,\r\n            });\r\n            highlightSelect !== undefined ? highlightSelect.remove() : console.log('');\r\n          });\r\n        }); // End of view.whenLayerView\r\n      }); // End of view.whenv\r\n    });\r\n\r\n    pieSeries.data.setAll(treeCompensationData);\r\n\r\n    // Legend\r\n    // https://www.amcharts.com/docs/v5/charts/percent-charts/legend-percent-series/\r\n    var legend = chart.children.push(\r\n      am5.Legend.new(root, {\r\n        centerX: am5.percent(50),\r\n        x: am5.percent(50),\r\n      }),\r\n    );\r\n    legendRef_compen.current = legend;\r\n    legend.data.setAll(pieSeries.dataItems);\r\n\r\n    // Change the size of legend markers\r\n    legend.markers.template.setAll({\r\n      width: 18,\r\n      height: 18,\r\n    });\r\n\r\n    // Change the marker shape\r\n    legend.markerRectangles.template.setAll({\r\n      cornerRadiusTL: 10,\r\n      cornerRadiusTR: 10,\r\n      cornerRadiusBL: 10,\r\n      cornerRadiusBR: 10,\r\n    });\r\n\r\n    // Responsive legend\r\n    // https://www.amcharts.com/docs/v5/tutorials/pie-chart-with-a-legend-with-dynamically-sized-labels/\r\n    // This aligns Legend to Left\r\n    chart.onPrivate('width', function (width: any) {\r\n      const boxWidth = legendBoxWidth; //props.style.width;\r\n      var availableSpace = Math.max(width - chart.height() - boxWidth, boxWidth);\r\n      //var availableSpace = (boxWidth - valueLabelsWidth) * 0.7\r\n      legend.labels.template.setAll({\r\n        width: availableSpace,\r\n        maxWidth: availableSpace,\r\n      });\r\n    });\r\n\r\n    // To align legend items: valueLabels right, labels to left\r\n    // 1. fix width of valueLabels\r\n    // 2. dynamically change width of labels by screen size\r\n\r\n    // Change legend labelling properties\r\n    // To have responsive font size, do not set font size\r\n    legend.labels.template.setAll({\r\n      oversizedBehavior: 'truncate',\r\n      fill: am5.color('#ffffff'),\r\n      //textDecoration: \"underline\"\r\n      //width: am5.percent(200)\r\n      //fontWeight: \"300\"\r\n    });\r\n\r\n    legend.valueLabels.template.setAll({\r\n      textAlign: 'right',\r\n      //width: valueLabelsWidth,\r\n      fill: am5.color('#ffffff'),\r\n      //fontSize: LEGEND_FONT_SIZE,\r\n    });\r\n\r\n    legend.itemContainers.template.setAll({\r\n      // set space between legend items\r\n      paddingTop: 1.1,\r\n      paddingBottom: 2,\r\n    });\r\n\r\n    pieSeries.appear(1000, 100);\r\n\r\n    return () => {\r\n      root.dispose();\r\n    };\r\n  }, [chartID_compen, treeCompensationData]);\r\n\r\n  useEffect(() => {\r\n    pieSeriesRef_compen.current?.data.setAll(treeCompensationData);\r\n    legendRef_compen.current?.data.setAll(pieSeriesRef_compen.current.dataItems);\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        style={{\r\n          color: primaryLabelColor,\r\n          fontSize: '1.2rem',\r\n          marginLeft: '13px',\r\n          marginTop: '10px',\r\n        }}\r\n      >\r\n        TOTAL TREES\r\n      </div>\r\n      <CalciteLabel layout=\"inline\">\r\n        <b className=\"totalLotsNumber\" style={{ color: valueLabelColor }}>\r\n          <div\r\n            style={{\r\n              color: valueLabelColor,\r\n              fontSize: '2rem',\r\n              fontWeight: 'bold',\r\n              fontFamily: 'calibri',\r\n              lineHeight: '1.2',\r\n              marginLeft: '15px',\r\n            }}\r\n          >\r\n            {thousands_separators(treesNumber[0])}\r\n          </div>\r\n          <img\r\n            src=\"https://EijiGorilla.github.io/Symbols/Tree_Logo.svg\"\r\n            alt=\"Land Logo\"\r\n            height={'55px'}\r\n            width={'55px'}\r\n            style={{ marginLeft: '260px', display: 'flex', marginTop: '-50px' }}\r\n          />\r\n        </b>\r\n      </CalciteLabel>\r\n\r\n      <div\r\n        id={chartID_cuting}\r\n        style={{\r\n          height: '35vh',\r\n          backgroundColor: 'rgb(0,0,0,0)',\r\n          color: 'white',\r\n        }}\r\n      ></div>\r\n      <div\r\n        id={chartID_compen}\r\n        style={{\r\n          height: '35vh',\r\n          backgroundColor: 'rgb(0,0,0,0)',\r\n          color: 'white',\r\n        }}\r\n      ></div>\r\n    </>\r\n  );\r\n}; // End of lotChartgs\r\n\r\nexport default TreeChart;\r\n"],"names":["maybeDisposeRoot","divId","am5","rootElements","root","dom","id","dispose","props","pieSeriesRef","useRef","legendRef","chartRef","treeCuttingData","setTreeCuttingData","useState","category","String","value","Number","sliceSettings","fill","chartID_cuting","pieSeriesRef_compen","legendRef_compen","chartRef_compen","treeCompensationData","setTreeCompensationData","chartID_compen","treesNumber","setTreesNumber","queryExpression","contractp","treeCuttingLayer","definitionExpression","treeCompensationLayer","useEffect","generateTreeCuttingData","then","result","generateTreeCompensationData","generateTreesNumber","response","_root$_logo","new","container","children","clear","_logo","setThemes","am5themes_Animated","am5themes_Responsive","chart","push","am5percent","layout","verticalLayout","current","pieSeries","series","name","categoryField","valueField","legendValueText","radius","innerRadius","scale","inner_label","text","fontSize","centerX","centerY","populateText","oversizedBehavior","textAlign","onPrivate","width","set","slices","template","setAll","toggleKey","fillOpacity","stroke","strokeWidth","strokeOpacity","templateField","labels","ticks","events","on","ev","_ev$target$dataItem","categorySelected","target","dataItem","dataContext","find","statusTreeCuttingChart","emp","statusSelect","highlightSelect","query","createQuery","view","when","whenLayerView","layerView","queryFeatures","results","ROW_N","features","length","objID","i","obj","attributes","OBJECTID","queryExt","Query","objectIds","queryExtent","extent","goTo","remove","highlight","filter","FeatureFilter","where","undefined","console","log","data","legend","x","dataItems","markers","height","markerRectangles","cornerRadiusTL","cornerRadiusTR","cornerRadiusBL","cornerRadiusBR","availableSpace","Math","max","maxWidth","valueLabels","itemContainers","paddingTop","paddingBottom","appear","_pieSeriesRef$current","_legendRef$current","_root$_logo2","_ev$target$dataItem2","statusTreeCompensationChart","_pieSeriesRef_compen$","_legendRef_compen$cur","_jsxs","_Fragment","_jsx","style","color","primaryLabelColor","marginLeft","marginTop","CalciteLabel","className","valueLabelColor","fontWeight","fontFamily","lineHeight","thousands_separators","src","alt","display","backgroundColor"],"sourceRoot":""}